type Environment = 'testnet' | 'mainnet' | 'sandbox';
type ClientOptions = {};
declare enum MessageStatus {
    INFLIGHT = "INFLIGHT",
    DELIVERED = "DELIVERED",
    FAILED = "FAILED"
}
type Message = {
    srcUaAddress: string;
    dstUaAddress: string;
    srcChainId: number;
    dstChainId: number;
    dstTxHash?: string;
    dstTxError?: string;
    srcTxHash?: string;
    srcBlockHash?: string;
    srcBlockNumber?: string;
    srcUaNonce: number;
    status: MessageStatus;
};
type GetMessagesBySrcTxHashResponse = {
    messages: Message[];
};
declare const createClient: (env: Environment, options?: ClientOptions) => {
    getMessagesBySrcTxHash(srcTxHash: string): Promise<GetMessagesBySrcTxHashResponse>;
};
declare function getMessagesBySrcTxHash(srcChainId: number, srcTxHash: string): Promise<GetMessagesBySrcTxHashResponse>;
type DeliveredMessage = Message & {
    dstTxHash: string;
};
declare function waitForMessageReceived(srcChainId: number, srcTxHash: string, pollInterval?: number): Promise<DeliveredMessage>;
declare function waitForAllMessagesReceived(srcChainId: number, srcTxHash: string, pollInterval?: number, numberOfMessages?: number): Promise<DeliveredMessage[]>;

export { ClientOptions, Environment, Message, MessageStatus, createClient, getMessagesBySrcTxHash, waitForAllMessagesReceived, waitForMessageReceived };
