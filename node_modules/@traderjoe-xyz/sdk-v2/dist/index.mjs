var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/index.ts
import JSBI3 from "jsbi";

// src/abis/json/index.ts
var json_exports = {};
__export(json_exports, {
  APTFarmABI: () => APTFarm_default,
  APTFarmLensABI: () => APTFarmLens_default,
  DexLensABI: () => DexLens_default,
  LBFactoryABI: () => LBFactory_default,
  LBFactoryV21ABI: () => LBFactoryV21_default,
  LBPairABI: () => LBPair_default,
  LBPairV21ABI: () => LBPairV21_default,
  LBQuoterABI: () => LBQuoter_default,
  LBQuoterV21ABI: () => LBQuoterV21_default,
  LBRewarderABI: () => LBRewarder_default,
  LBRouterABI: () => LBRouter_default,
  LBRouterV21ABI: () => LBRouterV21_default,
  LimitOrderManagerABI: () => LimitOrderManager_default,
  LiquidityAmountsHelperABI: () => LiquidityAmountsHelper_default,
  VaultABI: () => Vault_default,
  VaultFactoryABI: () => VaultFactory_default
});

// src/abis/json/LBPair.json
var LBPair_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "_factory",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AddressZeroOrThis",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AlreadyInitialized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__CompositionFactorFlawed",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__DistributionsOverflow",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanCallbackFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanTokenNotSupported",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanWrongFee",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__InsufficientAmounts",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__InsufficientLiquidityBurned",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__InsufficientLiquidityMinted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleSize",
        type: "uint256"
      }
    ],
    name: "LBPair__NewSizeTooSmall",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__OnlyFactory",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      },
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "LBPair__OnlyFeeRecipient",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__OnlyStrictlyIncreasingId",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__WrongLengths",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBToken__BurnExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__BurnFromAddress0",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "accountsLength",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idsLength",
        type: "uint256"
      }
    ],
    name: "LBToken__LengthMismatch",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__MintToAddress0",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__NotSupported",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "LBToken__SelfApproval",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "LBToken__SpenderNotApproved",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBToken__TransferExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__TransferFromOrToAddress0",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__TransferToSelf",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minTimestamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_lookUpTimestamp",
        type: "uint256"
      }
    ],
    name: "Oracle__LookUpTimestampTooOld",
    type: "error"
  },
  {
    inputs: [],
    name: "Oracle__NotInitialized",
    type: "error"
  },
  {
    inputs: [],
    name: "ReentrancyGuardUpgradeable__AlreadyInitialized",
    type: "error"
  },
  {
    inputs: [],
    name: "ReentrancyGuardUpgradeable__ReentrantCall",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds112Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds128Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds24Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds40Bits",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__CallFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__NonContract",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__TransferFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "TreeMath__ErrorDepthSearch",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesY",
        type: "uint256"
      }
    ],
    name: "CompositionFee",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "DepositedToBin",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "FeesCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "FlashLoan",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "previousSize",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newSize",
        type: "uint256"
      }
    ],
    name: "OracleSizeIncreased",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "ProtocolFeesCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "swapForY",
        type: "bool"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "volatilityAccumulated",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "TransferSingle",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawnFromBin",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_accounts",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "batchBalances",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "burn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "collectFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "collectProtocolFees",
    outputs: [
      {
        internalType: "uint128",
        name: "amountX",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "amountY",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeParameters",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "baseFactor",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "filterPeriod",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "decayPeriod",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "reductionFactor",
            type: "uint16"
          },
          {
            internalType: "uint24",
            name: "variableFeeControl",
            type: "uint24"
          },
          {
            internalType: "uint16",
            name: "protocolShare",
            type: "uint16"
          },
          {
            internalType: "uint24",
            name: "maxVolatilityAccumulated",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "volatilityAccumulated",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "volatilityReference",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "indexRef",
            type: "uint24"
          },
          {
            internalType: "uint40",
            name: "time",
            type: "uint40"
          }
        ],
        internalType: "struct FeeHelper.FeeParameters",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "findFirstNonEmptyBinId",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBFlashLoanCallback",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      }
    ],
    name: "getBin",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveY",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getGlobalFees",
    outputs: [
      {
        internalType: "uint128",
        name: "feesXTotal",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesYTotal",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesXProtocol",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesYProtocol",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOracleParameters",
    outputs: [
      {
        internalType: "uint256",
        name: "oracleSampleLifetime",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleActiveSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleLastTimestamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "min",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timeDelta",
        type: "uint256"
      }
    ],
    name: "getOracleSampleFrom",
    outputs: [
      {
        internalType: "uint256",
        name: "cumulativeId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "cumulativeVolatilityAccumulated",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "cumulativeBinCrossed",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getReservesAndId",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "activeId",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_newSize",
        type: "uint16"
      }
    ],
    name: "increaseOracleLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_sampleLifetime",
        type: "uint16"
      },
      {
        internalType: "bytes32",
        name: "_packedFeeParameters",
        type: "bytes32"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_distributionX",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_distributionY",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "pendingFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_approved",
        type: "bool"
      }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_packedFeeParameters",
        type: "bytes32"
      }
    ],
    name: "setFeesParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountXOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountYOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenX",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenY",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/json/LBFactory.json
var LBFactory_default = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeRecipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_flashLoanFee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__AddressZero",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__BinStepHasNoPreset",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256"
      },
      {
        internalType: "uint16",
        name: "binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "higherBound",
        type: "uint256"
      }
    ],
    name: "LBFactory__BinStepRequirementsBreached",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "decayPeriod",
        type: "uint16"
      }
    ],
    name: "LBFactory__DecreasingPeriods",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__FactoryLockIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxFees",
        type: "uint256"
      }
    ],
    name: "LBFactory__FeesAboveMax",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxFees",
        type: "uint256"
      }
    ],
    name: "LBFactory__FlashLoanFeeAboveMax",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address"
      }
    ],
    name: "LBFactory__FunctionIsLockedForUsers",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      }
    ],
    name: "LBFactory__IdenticalAddresses",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__ImplementationNotSet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__LBPairAlreadyExists",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__LBPairNotCreated",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__LBPairSafetyCheckFailed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "LBFactory__ProtocolShareOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetAlreadyWhitelisted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetNotWhitelisted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "LBFactory__ReductionFactorOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "LBFactory__SameFeeRecipient",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flashLoanFee",
        type: "uint256"
      }
    ],
    name: "LBFactory__SameFlashLoanFee",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__SameImplementation",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NoPendingOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NotOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NotPendingOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__PendingOwnerAlreadySet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds16Bits",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "unlocked",
        type: "bool"
      }
    ],
    name: "FactoryLockedStatusUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      }
    ],
    name: "FeeParametersSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFlashLoanFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFee",
        type: "uint256"
      }
    ],
    name: "FlashLoanFeeSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      }
    ],
    name: "LBPairCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "ignored",
        type: "bool"
      }
    ],
    name: "LBPairIgnoredStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldLBPairImplementation",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBPairImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "PresetRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleLifetime",
        type: "uint256"
      }
    ],
    name: "PresetSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetRemoved",
    type: "event"
  },
  {
    inputs: [],
    name: "LBPairImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_BIN_STEP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_PROTOCOL_SHARE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MIN_BIN_STEP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_quoteAsset",
        type: "address"
      }
    ],
    name: "addQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "allLBPairs",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "createLBPair",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "creationUnlocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "flashLoanFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      }
    ],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllBinSteps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "presetsBinStep",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      }
    ],
    name: "getAllLBPairs",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          {
            internalType: "bool",
            name: "createdByOwner",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation[]",
        name: "LBPairsAvailable",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenA",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      }
    ],
    name: "getLBPairInformation",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          {
            internalType: "bool",
            name: "createdByOwner",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfLBPairs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfQuoteAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "getPreset",
    outputs: [
      {
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "sampleLifetime",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "getQuoteAsset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      }
    ],
    name: "isQuoteAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "removePreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_quoteAsset",
        type: "address"
      }
    ],
    name: "removeQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "revokePendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_locked",
        type: "bool"
      }
    ],
    name: "setFactoryLockedState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeRecipient",
        type: "address"
      }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_baseFactor",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_decayPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_variableFeeControl",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_maxVolatilityAccumulated",
        type: "uint24"
      }
    ],
    name: "setFeesParametersOnPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_flashLoanFee",
        type: "uint256"
      }
    ],
    name: "setFlashLoanFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_ignored",
        type: "bool"
      }
    ],
    name: "setLBPairIgnored",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_LBPairImplementation",
        type: "address"
      }
    ],
    name: "setLBPairImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pendingOwner_",
        type: "address"
      }
    ],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_baseFactor",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_decayPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_variableFeeControl",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_maxVolatilityAccumulated",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_sampleLifetime",
        type: "uint16"
      }
    ],
    name: "setPreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/json/LBRouter.json
var LBRouter_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "_oldFactory",
        type: "address"
      },
      {
        internalType: "contract IWAVAX",
        name: "_wavax",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "id",
        type: "int256"
      }
    ],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "BinHelper__IntOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountXMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountYMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "LBRouter__AmountSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBRouter__BinReserveOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__BrokenSwapSafetyCheck",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256"
      }
    ],
    name: "LBRouter__DeadlineExceeded",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBRouter__FailedToSendAVAX",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "idDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idSlippage",
        type: "uint256"
      }
    ],
    name: "LBRouter__IdDesiredOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "id",
        type: "int256"
      }
    ],
    name: "LBRouter__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activeIdDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idSlippage",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "activeId",
        type: "uint256"
      }
    ],
    name: "LBRouter__IdSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    name: "LBRouter__InsufficientAmountOut",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "wrongToken",
        type: "address"
      }
    ],
    name: "LBRouter__InvalidTokenPath",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__LengthsMismatch",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    name: "LBRouter__MaxAmountInExceeded",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__NotFactoryOwner",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBRouter__PairNotCreated",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__SenderIsNotWAVAX",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBRouter__SwapOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "excess",
        type: "uint256"
      }
    ],
    name: "LBRouter__TooMuchTokensIn",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserve",
        type: "uint256"
      }
    ],
    name: "LBRouter__WrongAmounts",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "msgValue",
        type: "uint256"
      }
    ],
    name: "LBRouter__WrongAvaxLiquidityParameters",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__WrongTokenOrder",
    type: "error"
  },
  {
    inputs: [],
    name: "Math128x128__LogUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds128Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds40Bits",
    type: "error"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "binStep",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountX",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountY",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "_liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "binStep",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountX",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountY",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "_liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "createLBPair",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "pair",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256"
      }
    ],
    name: "getIdFromPrice",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      }
    ],
    name: "getPriceFromId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "getSwapIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feesIn",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "getSwapOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feesIn",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "oldFactory",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_amountXMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountYMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapAVAXForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMinAVAX",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMinAVAX",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountAVAXOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBToken",
        name: "_lbToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      }
    ],
    name: "sweepLBToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "wavax",
    outputs: [
      {
        internalType: "contract IWAVAX",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/abis/json/LBRouterV21.json
var LBRouterV21_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyFactory",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyRouter",
        name: "legacyRouter",
        type: "address"
      },
      {
        internalType: "contract IWNATIVE",
        name: "wnative",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "AddressHelper__CallFailed", type: "error" },
  { inputs: [], name: "AddressHelper__NonContract", type: "error" },
  { inputs: [], name: "JoeLibrary__InsufficientAmount", type: "error" },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientLiquidity",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountSlippage", type: "uint256" }
    ],
    name: "LBRouter__AmountSlippageBPTooBig",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountXMin", type: "uint256" },
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountYMin", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "LBRouter__AmountSlippageCaught",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "LBRouter__BinReserveOverflows",
    type: "error"
  },
  { inputs: [], name: "LBRouter__BrokenSwapSafetyCheck", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "deadline", type: "uint256" },
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256"
      }
    ],
    name: "LBRouter__DeadlineExceeded",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBRouter__FailedToSendNATIVE",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "idDesired", type: "uint256" },
      { internalType: "uint256", name: "idSlippage", type: "uint256" }
    ],
    name: "LBRouter__IdDesiredOverflows",
    type: "error"
  },
  {
    inputs: [{ internalType: "int256", name: "id", type: "int256" }],
    name: "LBRouter__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activeIdDesired",
        type: "uint256"
      },
      { internalType: "uint256", name: "idSlippage", type: "uint256" },
      { internalType: "uint256", name: "activeId", type: "uint256" }
    ],
    name: "LBRouter__IdSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    name: "LBRouter__InsufficientAmountOut",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "wrongToken", type: "address" }
    ],
    name: "LBRouter__InvalidTokenPath",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "version", type: "uint256" }
    ],
    name: "LBRouter__InvalidVersion",
    type: "error"
  },
  { inputs: [], name: "LBRouter__LengthsMismatch", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      { internalType: "uint256", name: "amountIn", type: "uint256" }
    ],
    name: "LBRouter__MaxAmountInExceeded",
    type: "error"
  },
  { inputs: [], name: "LBRouter__NotFactoryOwner", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "tokenX", type: "address" },
      { internalType: "address", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBRouter__PairNotCreated",
    type: "error"
  },
  { inputs: [], name: "LBRouter__SenderIsNotWNATIVE", type: "error" },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "LBRouter__SwapOverflows",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "excess", type: "uint256" }
    ],
    name: "LBRouter__TooMuchTokensIn",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "reserve", type: "uint256" }
    ],
    name: "LBRouter__WrongAmounts",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "tokenX", type: "address" },
      { internalType: "address", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" },
      { internalType: "uint256", name: "msgValue", type: "uint256" }
    ],
    name: "LBRouter__WrongNativeLiquidityParameters",
    type: "error"
  },
  { inputs: [], name: "LBRouter__WrongTokenOrder", type: "error" },
  { inputs: [], name: "TokenHelper__TransferFailed", type: "error" },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint256", name: "binStep", type: "uint256" },
          { internalType: "uint256", name: "amountX", type: "uint256" },
          { internalType: "uint256", name: "amountY", type: "uint256" },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          { internalType: "address", name: "to", type: "address" },
          { internalType: "address", name: "refundTo", type: "address" },
          { internalType: "uint256", name: "deadline", type: "uint256" }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountXAdded", type: "uint256" },
      { internalType: "uint256", name: "amountYAdded", type: "uint256" },
      { internalType: "uint256", name: "amountXLeft", type: "uint256" },
      { internalType: "uint256", name: "amountYLeft", type: "uint256" },
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint256", name: "binStep", type: "uint256" },
          { internalType: "uint256", name: "amountX", type: "uint256" },
          { internalType: "uint256", name: "amountY", type: "uint256" },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          { internalType: "address", name: "to", type: "address" },
          { internalType: "address", name: "refundTo", type: "address" },
          { internalType: "uint256", name: "deadline", type: "uint256" }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidityNATIVE",
    outputs: [
      { internalType: "uint256", name: "amountXAdded", type: "uint256" },
      { internalType: "uint256", name: "amountYAdded", type: "uint256" },
      { internalType: "uint256", name: "amountXLeft", type: "uint256" },
      { internalType: "uint256", name: "amountYLeft", type: "uint256" },
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint24", name: "activeId", type: "uint24" },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "createLBPair",
    outputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "lbFactory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    name: "getIdFromPrice",
    outputs: [{ internalType: "uint24", name: "", type: "uint24" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactory",
    outputs: [
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyLBfactory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyRouter",
    outputs: [
      {
        internalType: "contract ILBLegacyRouter",
        name: "legacyRouter",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint24", name: "id", type: "uint24" }
    ],
    name: "getPriceFromId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapIn",
    outputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "uint128", name: "amountOutLeft", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapOut",
    outputs: [
      { internalType: "uint128", name: "amountInLeft", type: "uint128" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getV1Factory",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNATIVE",
    outputs: [
      {
        internalType: "contract IWNATIVE",
        name: "wnative",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint256", name: "amountXMin", type: "uint256" },
      { internalType: "uint256", name: "amountYMin", type: "uint256" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountNATIVEMin",
        type: "uint256"
      },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidityNATIVE",
    outputs: [
      { internalType: "uint256", name: "amountToken", type: "uint256" },
      { internalType: "uint256", name: "amountNATIVE", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactNATIVEForTokens",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountOutMinNATIVE",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForNATIVE",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountOutMinNATIVE",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapNATIVEForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountNATIVEOut",
        type: "uint256"
      },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactNATIVE",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBToken",
        name: "lbToken",
        type: "address"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    name: "sweepLBToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/json/DexLens.json
var DexLens_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "lbFactory",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyFactory",
        name: "lbLegacyFactory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "joeFactory",
        type: "address"
      },
      { internalType: "address", name: "wnative", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "JoeDexLens__AlreadyInitialized", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "pair", type: "address" },
      { internalType: "address", name: "collateral", type: "address" }
    ],
    name: "JoeDexLens__CollateralNotInPair",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dataFeed", type: "address" }
    ],
    name: "JoeDexLens__DataFeedAlreadyAdded",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dataFeed", type: "address" }
    ],
    name: "JoeDexLens__DataFeedNotInSet",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeDexLens__InvalidChainLinkPrice",
    type: "error"
  },
  { inputs: [], name: "JoeDexLens__InvalidDataFeed", type: "error" },
  { inputs: [], name: "JoeDexLens__LengthsMismatch", type: "error" },
  { inputs: [], name: "JoeDexLens__NativeToken", type: "error" },
  { inputs: [], name: "JoeDexLens__NullWeight", type: "error" },
  { inputs: [], name: "JoeDexLens__SameDataFeed", type: "error" },
  { inputs: [], name: "JoeDexLens__SameTokens", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "pair", type: "address" },
      { internalType: "address", name: "token", type: "address" }
    ],
    name: "JoeDexLens__TokenNotInPair",
    type: "error"
  },
  { inputs: [], name: "JoeDexLens__UnknownDataFeedType", type: "error" },
  { inputs: [], name: "JoeDexLens__V1ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__V2ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__V2_1ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__ZeroAddress", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__AccountAlreadyHasRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__AccountDoesNotHaveRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__OnlyOwnerOrRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__OnlyRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__RoleAlreadyGranted",
    type: "error"
  },
  { inputs: [], name: "SafeOwnable__OnlyOwner", type: "error" },
  { inputs: [], name: "SafeOwnable__OnlyPendingOwner", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  {
    inputs: [],
    name: "Uint256x256Math__MulShiftOverflow",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        indexed: false,
        internalType: "struct IJoeDexLens.DataFeed",
        name: "dataFeed",
        type: "tuple"
      }
    ],
    name: "DataFeedAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      }
    ],
    name: "DataFeedRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weight",
        type: "uint256"
      }
    ],
    name: "DataFeedsWeightSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      }
    ],
    name: "NativeDataFeedSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "adminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    inputs: [],
    name: "DATA_FEED_MANAGER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed",
        name: "dataFeed",
        type: "tuple"
      }
    ],
    name: "addDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed[]",
        name: "dataFeeds",
        type: "tuple[]"
      }
    ],
    name: "addDataFeeds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" }
    ],
    name: "getDataFeeds",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed[]",
        name: "dataFeeds",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV1",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV2_1",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "factoryV2",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactoryV2",
    outputs: [
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyFactoryV2",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getRoleMemberAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "getRoleMemberCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" }
    ],
    name: "getTokenPriceNative",
    outputs: [
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" }
    ],
    name: "getTokenPriceUSD",
    outputs: [
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" }
    ],
    name: "getTokensPricesNative",
    outputs: [
      { internalType: "uint256[]", name: "prices", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" }
    ],
    name: "getTokensPricesUSD",
    outputs: [
      { internalType: "uint256[]", name: "prices", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [
      { internalType: "address", name: "wNative", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "aggregator", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dfAddress", type: "address" }
    ],
    name: "removeDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      {
        internalType: "address[]",
        name: "dfAddresses",
        type: "address[]"
      }
    ],
    name: "removeDataFeeds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dfAddress", type: "address" },
      { internalType: "uint88", name: "newWeight", type: "uint88" }
    ],
    name: "setDataFeedWeight",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      {
        internalType: "address[]",
        name: "dfAddresses",
        type: "address[]"
      },
      { internalType: "uint88[]", name: "newWeights", type: "uint88[]" }
    ],
    name: "setDataFeedsWeights",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "aggregator", type: "address" }
    ],
    name: "setNativeDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newOwner", type: "address" }
    ],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/json/LBQuoter.json
var LBQuoter_default = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerV2",
        type: "address"
      },
      {
        internalType: "address",
        name: "_factoryV1",
        type: "address"
      },
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__IdenticalAddresses",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientAmount",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientLiquidity",
    type: "error"
  },
  {
    inputs: [],
    name: "LBQuoter_InvalidLength",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "factoryV1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_route",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      }
    ],
    name: "findBestPathFromAmountIn",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "pairs",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "fees",
            type: "uint256[]"
          }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_route",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      }
    ],
    name: "findBestPathFromAmountOut",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "pairs",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "fees",
            type: "uint256[]"
          }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "routerV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/json/LBQuoterV21.json
var LBQuoterV21_default = [
  {
    inputs: [
      { internalType: "address", name: "factoryV1", type: "address" },
      {
        internalType: "address",
        name: "legacyFactoryV2",
        type: "address"
      },
      { internalType: "address", name: "factoryV2", type: "address" },
      {
        internalType: "address",
        name: "legacyRouterV2",
        type: "address"
      },
      { internalType: "address", name: "routerV2", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "JoeLibrary__AddressZero", type: "error" },
  { inputs: [], name: "JoeLibrary__IdenticalAddresses", type: "error" },
  { inputs: [], name: "JoeLibrary__InsufficientAmount", type: "error" },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientLiquidity",
    type: "error"
  },
  { inputs: [], name: "LBQuoter_InvalidLength", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    inputs: [],
    name: "Uint256x256Math__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address[]", name: "route", type: "address[]" },
      { internalType: "uint128", name: "amountIn", type: "uint128" }
    ],
    name: "findBestPathFromAmountIn",
    outputs: [
      {
        components: [
          { internalType: "address[]", name: "route", type: "address[]" },
          { internalType: "address[]", name: "pairs", type: "address[]" },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "uint128[]",
            name: "amounts",
            type: "uint128[]"
          },
          {
            internalType: "uint128[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint128[]"
          },
          { internalType: "uint128[]", name: "fees", type: "uint128[]" }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "route", type: "address[]" },
      { internalType: "uint128", name: "amountOut", type: "uint128" }
    ],
    name: "findBestPathFromAmountOut",
    outputs: [
      {
        components: [
          { internalType: "address[]", name: "route", type: "address[]" },
          { internalType: "address[]", name: "pairs", type: "address[]" },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "uint128[]",
            name: "amounts",
            type: "uint128[]"
          },
          {
            internalType: "uint128[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint128[]"
          },
          { internalType: "uint128[]", name: "fees", type: "uint128[]" }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV1",
    outputs: [
      { internalType: "address", name: "factoryV1", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV2",
    outputs: [
      { internalType: "address", name: "factoryV2", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactoryV2",
    outputs: [
      {
        internalType: "address",
        name: "legacyFactoryV2",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyRouterV2",
    outputs: [
      { internalType: "address", name: "legacyRouterV2", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getRouterV2",
    outputs: [
      { internalType: "address", name: "routerV2", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/json/LBRewarder.json
var LBRewarder_default = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      }
    ],
    name: "Rewarder__AlreadySetForEpoch",
    type: "error"
  },
  { inputs: [], name: "Rewarder__ClawbackDelayNotPassed", type: "error" },
  { inputs: [], name: "Rewarder__ClawbackDelayTooLow", type: "error" },
  { inputs: [], name: "Rewarder__EmptyMerkleEntries", type: "error" },
  { inputs: [], name: "Rewarder__EpochCanceled", type: "error" },
  { inputs: [], name: "Rewarder__EpochDoesNotExist", type: "error" },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      }
    ],
    name: "Rewarder__InsufficientBalance",
    type: "error"
  },
  { inputs: [], name: "Rewarder__InvalidAmount", type: "error" },
  { inputs: [], name: "Rewarder__InvalidEpoch", type: "error" },
  { inputs: [], name: "Rewarder__InvalidLength", type: "error" },
  { inputs: [], name: "Rewarder__InvalidProof", type: "error" },
  { inputs: [], name: "Rewarder__InvalidRoot", type: "error" },
  { inputs: [], name: "Rewarder__InvalidStart", type: "error" },
  {
    inputs: [],
    name: "Rewarder__MarketAlreadyWhitelisted",
    type: "error"
  },
  { inputs: [], name: "Rewarder__MarketNotWhitelisted", type: "error" },
  { inputs: [], name: "Rewarder__NativeTransferFailed", type: "error" },
  { inputs: [], name: "Rewarder__OnlyClaimForSelf", type: "error" },
  { inputs: [], name: "Rewarder__OnlyValidLatestEpoch", type: "error" },
  { inputs: [], name: "Rewarder__OverlappingEpoch", type: "error" },
  { inputs: [], name: "Rewarder__ZeroAddress", type: "error" },
  {
    inputs: [],
    name: "SafeAccessControl__DefaultAdminRoleBoundToOwner",
    type: "error"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControl__OnlyOwnerOrRole",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint96",
        name: "newClawbackDelay",
        type: "uint96"
      }
    ],
    name: "ClawbackDelayUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newClawbackRecipient",
        type: "address"
      }
    ],
    name: "ClawbackRecipientUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "start",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "duration",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      }
    ],
    name: "EpochAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      }
    ],
    name: "EpochCanceled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      }
    ],
    name: "MarketAddedToWhitelist",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      }
    ],
    name: "MarketRemovedFromWhitelist",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "released",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unreleased",
        type: "uint256"
      }
    ],
    name: "RewardClaimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "clawbackAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RewardClawedBack",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "CLAWBACK_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UNPAUSER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" }
    ],
    name: "addMarketToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "batchClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "batchClawback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" }
    ],
    name: "cancelEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "clawback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "getBatchReleasableAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "releasableAmounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getClawbackParameters",
    outputs: [
      {
        internalType: "address",
        name: "clawbackRecipient",
        type: "address"
      },
      { internalType: "uint96", name: "clawbackDelay", type: "uint96" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" }
    ],
    name: "getEpochParameters",
    outputs: [
      {
        components: [
          { internalType: "bytes32", name: "root", type: "bytes32" },
          { internalType: "uint128", name: "start", type: "uint128" },
          { internalType: "uint128", name: "duration", type: "uint128" }
        ],
        internalType: "struct IRewarder.EpochParameters",
        name: "params",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" }
    ],
    name: "getNumberOfEpochs",
    outputs: [
      { internalType: "uint256", name: "epochs", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfWhitelistedMarkets",
    outputs: [
      { internalType: "uint256", name: "count", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "getReleasableAmount",
    outputs: [
      { internalType: "uint256", name: "releasable", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getReleased",
    outputs: [
      { internalType: "uint256", name: "released", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getWhitelistedMarket",
    outputs: [
      { internalType: "address", name: "market", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint96", name: "clawbackDelay", type: "uint96" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" }
    ],
    name: "isMarketWhitelisted",
    outputs: [
      { internalType: "bool", name: "isWhitelisted", type: "bool" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" }
    ],
    name: "removeMarketFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint96", name: "newClawbackDelay", type: "uint96" }
    ],
    name: "setClawbackDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newRecipient", type: "address" }
    ],
    name: "setClawbackRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      { internalType: "uint128", name: "start", type: "uint128" },
      { internalType: "uint128", name: "duration", type: "uint128" },
      {
        internalType: "contract IERC20Upgradeable[]",
        name: "tokens",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "totalAmountToRelease",
        type: "uint256[]"
      },
      { internalType: "bytes32", name: "root", type: "bytes32" }
    ],
    name: "setNewEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes4", name: "interfaceId", type: "bytes4" }
    ],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newOwner", type: "address" }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "verify",
    outputs: [{ internalType: "bool", name: "isValid", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/json/Vault.json
var Vault_default = [
  {
    inputs: [
      {
        internalType: "contract IVaultFactory",
        name: "factory",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "BaseVault__AlreadyWhitelisted",
    type: "error"
  },
  { inputs: [], name: "BaseVault__BurnMinShares", type: "error" },
  { inputs: [], name: "BaseVault__DepositsPaused", type: "error" },
  { inputs: [], name: "BaseVault__InvalidNativeAmount", type: "error" },
  { inputs: [], name: "BaseVault__InvalidRecipient", type: "error" },
  { inputs: [], name: "BaseVault__InvalidRound", type: "error" },
  { inputs: [], name: "BaseVault__InvalidShares", type: "error" },
  { inputs: [], name: "BaseVault__InvalidStrategy", type: "error" },
  { inputs: [], name: "BaseVault__InvalidToken", type: "error" },
  { inputs: [], name: "BaseVault__MaxSharesExceeded", type: "error" },
  { inputs: [], name: "BaseVault__NativeTransferFailed", type: "error" },
  { inputs: [], name: "BaseVault__NoNativeToken", type: "error" },
  { inputs: [], name: "BaseVault__NoQueuedWithdrawal", type: "error" },
  { inputs: [], name: "BaseVault__NotInEmergencyMode", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "BaseVault__NotWhitelisted",
    type: "error"
  },
  { inputs: [], name: "BaseVault__OnlyFactory", type: "error" },
  { inputs: [], name: "BaseVault__OnlyStrategy", type: "error" },
  { inputs: [], name: "BaseVault__OnlyWNative", type: "error" },
  { inputs: [], name: "BaseVault__SameStrategy", type: "error" },
  { inputs: [], name: "BaseVault__SameWhitelistState", type: "error" },
  { inputs: [], name: "BaseVault__Unauthorized", type: "error" },
  { inputs: [], name: "BaseVault__ZeroAmount", type: "error" },
  { inputs: [], name: "BaseVault__ZeroShares", type: "error" },
  { inputs: [], name: "SimpleVault__AmountsOverflow", type: "error" },
  { inputs: [], name: "SimpleVault__ZeroCross", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "Deposited",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "DepositsPaused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "DepositsResumed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EmergencyMode",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdrawal",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Recovered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IStrategy",
        name: "strategy",
        type: "address"
      }
    ],
    name: "StrategySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]"
      }
    ],
    name: "WhitelistAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]"
      }
    ],
    name: "WhitelistRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "state",
        type: "bool"
      }
    ],
    name: "WhitelistStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "WithdrawalCancelled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalQueuedQhares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "WithdrawalQueued",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawalRedeemed",
    type: "event"
  },
  { stateMutability: "payable", type: "fallback" },
  {
    inputs: [
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "shares", type: "uint256" }
    ],
    name: "cancelQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "round", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "deposit",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "depositNative",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "executeQueuedWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAumAnnualFee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getBalances",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentRound",
    outputs: [
      { internalType: "uint256", name: "round", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentTotalQueuedWithdrawal",
    outputs: [
      {
        internalType: "uint256",
        name: "totalQueuedShares",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract IVaultFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOperators",
    outputs: [
      {
        internalType: "address",
        name: "defaultOperator",
        type: "address"
      },
      { internalType: "address", name: "operator", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getPair",
    outputs: [
      { internalType: "contract ILBPair", name: "", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getRange",
    outputs: [
      { internalType: "uint24", name: "low", type: "uint24" },
      { internalType: "uint24", name: "upper", type: "uint24" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getRedeemableAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getStrategy",
    outputs: [
      { internalType: "contract IStrategy", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" }
    ],
    name: "getTotalQueuedWithdrawal",
    outputs: [
      {
        internalType: "uint256",
        name: "totalQueuedShares",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "addedValue", type: "uint256" }
    ],
    name: "increaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      { internalType: "string", name: "symbol", type: "string" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "isDepositsPaused",
    outputs: [{ internalType: "bool", name: "paused", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "isWhitelisted",
    outputs: [
      { internalType: "bool", name: "whitelisted", type: "bool" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isWhitelistedOnly",
    outputs: [
      { internalType: "bool", name: "whitelist", type: "bool" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pauseDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "shares", type: "uint256" }
    ],
    name: "previewAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "previewShares",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "queueWithdrawal",
    outputs: [
      { internalType: "uint256", name: "round", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "redeemQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "redeemQueuedWithdrawalNative",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "resumeDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IStrategy",
        name: "newStrategy",
        type: "address"
      }
    ],
    name: "setStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "bool", name: "state", type: "bool" }],
    name: "setWhitelistState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/json/VaultFactory.json
var VaultFactory_default = [
  {
    inputs: [
      { internalType: "address", name: "wnative", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "VaultFactory__InvalidDecimals", type: "error" },
  {
    inputs: [],
    name: "VaultFactory__InvalidFeeRecipient",
    type: "error"
  },
  { inputs: [], name: "VaultFactory__InvalidLength", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidOraclePrice", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidOwner", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidStrategy", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidType", type: "error" },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "VaultFactory__StrategyImplementationNotSet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "VaultFactory__VaultImplementationNotSet",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "defaultOperator",
        type: "address"
      }
    ],
    name: "DefaultOperatorSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategy",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "strategyIndex",
        type: "uint256"
      }
    ],
    name: "StrategyCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategyImplementation",
        type: "address"
      }
    ],
    name: "StrategyImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultIndex",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenY",
        type: "address"
      }
    ],
    name: "VaultCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vaultImplementation",
        type: "address"
      }
    ],
    name: "VaultImplementationSet",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "vaults", type: "address[]" },
      { internalType: "uint256[]", name: "rounds", type: "uint256[]" },
      { internalType: "bool[]", name: "withdrawNative", type: "bool[]" }
    ],
    name: "batchRedeemQueuedWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      }
    ],
    name: "createDefaultStrategy",
    outputs: [
      { internalType: "address", name: "strategy", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedX",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedY",
        type: "address"
      }
    ],
    name: "createOracleVault",
    outputs: [
      { internalType: "address", name: "vault", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedX",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedY",
        type: "address"
      }
    ],
    name: "createOracleVaultAndDefaultStrategy",
    outputs: [
      { internalType: "address", name: "vault", type: "address" },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      }
    ],
    name: "createSimpleVault",
    outputs: [
      { internalType: "address", name: "vault", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      }
    ],
    name: "createSimpleVaultAndDefaultStrategy",
    outputs: [
      { internalType: "address", name: "vault", type: "address" },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getDefaultOperator",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "getNumberOfStrategies",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "getNumberOfVaults",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getStrategyAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "getStrategyImplementation",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "strategy", type: "address" }
    ],
    name: "getStrategyType",
    outputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getVaultAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "getVaultImplementation",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "vault", type: "address" }
    ],
    name: "getVaultType",
    outputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    name: "linkVaultToStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      }
    ],
    name: "pauseDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      }
    ],
    name: "resetPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      }
    ],
    name: "resumeDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "defaultOperator",
        type: "address"
      }
    ],
    name: "setDefaultOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      }
    ],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IStrategy",
        name: "strategy",
        type: "address"
      },
      { internalType: "address", name: "operator", type: "address" }
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "pendingAumAnnualFee",
        type: "uint16"
      }
    ],
    name: "setPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "strategyImplementation",
        type: "address"
      }
    ],
    name: "setStrategyImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "vaultImplementation",
        type: "address"
      }
    ],
    name: "setVaultImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IBaseVault",
        name: "vault",
        type: "address"
      },
      { internalType: "bool", name: "isWhitelisted", type: "bool" }
    ],
    name: "setWhitelistState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newOwner", type: "address" }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/json/LBFactoryV21.json
var LBFactoryV21_default = [
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" },
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "LBFactory__AddressZero", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__BinStepHasNoPreset",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__BinStepTooLow",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "fees", type: "uint256" },
      { internalType: "uint256", name: "maxFees", type: "uint256" }
    ],
    name: "LBFactory__FlashLoanFeeAboveMax",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" }
    ],
    name: "LBFactory__IdenticalAddresses",
    type: "error"
  },
  { inputs: [], name: "LBFactory__ImplementationNotSet", type: "error" },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint256", name: "_binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairAlreadyExists",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairDoesNotExist",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairNotCreated",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__LBPairSafetyCheckFailed",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__PresetIsLockedForUsers",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__PresetOpenStateIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetAlreadyWhitelisted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetNotWhitelisted",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "LBFactory__SameFeeRecipient",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    name: "LBFactory__SameFlashLoanFee",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__SameImplementation",
    type: "error"
  },
  {
    inputs: [],
    name: "PairParametersHelper__InvalidParameter",
    type: "error"
  },
  { inputs: [], name: "PendingOwnable__AddressZero", type: "error" },
  { inputs: [], name: "PendingOwnable__NoPendingOwner", type: "error" },
  { inputs: [], name: "PendingOwnable__NotOwner", type: "error" },
  { inputs: [], name: "PendingOwnable__NotPendingOwner", type: "error" },
  {
    inputs: [],
    name: "PendingOwnable__PendingOwnerAlreadySet",
    type: "error"
  },
  { inputs: [], name: "SafeCast__Exceeds16Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFlashLoanFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFee",
        type: "uint256"
      }
    ],
    name: "FlashLoanFeeSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      }
    ],
    name: "LBPairCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "ignored",
        type: "bool"
      }
    ],
    name: "LBPairIgnoredStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldLBPairImplementation",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBPairImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "bool",
        name: "isOpen",
        type: "bool"
      }
    ],
    name: "PresetOpenStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "PresetRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulator",
        type: "uint256"
      }
    ],
    name: "PresetSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetRemoved",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "addQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint24", name: "activeId", type: "uint24" },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "createLBPair",
    outputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllBinSteps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "binStepWithPreset",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      { internalType: "contract IERC20", name: "tokenY", type: "address" }
    ],
    name: "getAllLBPairs",
    outputs: [
      {
        components: [
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          { internalType: "bool", name: "createdByOwner", type: "bool" },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation[]",
        name: "lbPairsAvailable",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFlashLoanFee",
    outputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getLBPairAtIndex",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLBPairImplementation",
    outputs: [
      {
        internalType: "address",
        name: "lbPairImplementation",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenA",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenB",
        type: "address"
      },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "getLBPairInformation",
    outputs: [
      {
        components: [
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          { internalType: "bool", name: "createdByOwner", type: "bool" },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation",
        name: "lbPairInformation",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getMaxFlashLoanFee",
    outputs: [
      { internalType: "uint256", name: "maxFee", type: "uint256" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getMinBinStep",
    outputs: [
      { internalType: "uint256", name: "minBinStep", type: "uint256" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfLBPairs",
    outputs: [
      { internalType: "uint256", name: "lbPairNumber", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfQuoteAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "numberOfQuoteAssets",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOpenBinSteps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "openBinStep",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "getPreset",
    outputs: [
      { internalType: "uint256", name: "baseFactor", type: "uint256" },
      { internalType: "uint256", name: "filterPeriod", type: "uint256" },
      { internalType: "uint256", name: "decayPeriod", type: "uint256" },
      {
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      { internalType: "uint256", name: "protocolShare", type: "uint256" },
      {
        internalType: "uint256",
        name: "maxVolatilityAccumulator",
        type: "uint256"
      },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getQuoteAssetAtIndex",
    outputs: [
      { internalType: "contract IERC20", name: "asset", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" }
    ],
    name: "isQuoteAsset",
    outputs: [{ internalType: "bool", name: "isQuote", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "removePreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "removeQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "revokePendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "setFeesParametersOnPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    name: "setFlashLoanFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "bool", name: "ignored", type: "bool" }
    ],
    name: "setLBPairIgnored",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newLBPairImplementation",
        type: "address"
      }
    ],
    name: "setLBPairImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "pendingOwner_", type: "address" }
    ],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    name: "setPreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    name: "setPresetOpenState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/json/LBPairV21.json
var LBPairV21_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory_",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "AddressHelper__CallFailed", type: "error" },
  { inputs: [], name: "AddressHelper__NonContract", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "BinHelper__CompositionFactorFlawed",
    type: "error"
  },
  { inputs: [], name: "BinHelper__LiquidityOverflow", type: "error" },
  { inputs: [], name: "FeeHelper__FeeOverflow", type: "error" },
  { inputs: [], name: "LBPair__AddressZero", type: "error" },
  { inputs: [], name: "LBPair__AlreadyInitialized", type: "error" },
  { inputs: [], name: "LBPair__EmptyMarketConfigs", type: "error" },
  { inputs: [], name: "LBPair__FlashLoanCallbackFailed", type: "error" },
  {
    inputs: [],
    name: "LBPair__FlashLoanInsufficientAmount",
    type: "error"
  },
  { inputs: [], name: "LBPair__InsufficientAmountIn", type: "error" },
  { inputs: [], name: "LBPair__InsufficientAmountOut", type: "error" },
  { inputs: [], name: "LBPair__InvalidInput", type: "error" },
  {
    inputs: [],
    name: "LBPair__InvalidStaticFeeParameters",
    type: "error"
  },
  { inputs: [], name: "LBPair__MaxTotalFeeExceeded", type: "error" },
  { inputs: [], name: "LBPair__OnlyFactory", type: "error" },
  { inputs: [], name: "LBPair__OnlyProtocolFeeRecipient", type: "error" },
  { inputs: [], name: "LBPair__OutOfLiquidity", type: "error" },
  { inputs: [], name: "LBPair__TokenNotSupported", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroAmount",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroAmountsOut",
    type: "error"
  },
  { inputs: [], name: "LBPair__ZeroBorrowAmount", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroShares",
    type: "error"
  },
  { inputs: [], name: "LBToken__AddressThisOrZero", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBToken__BurnExceedsBalance",
    type: "error"
  },
  { inputs: [], name: "LBToken__InvalidLength", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" }
    ],
    name: "LBToken__SelfApproval",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "LBToken__SpenderNotApproved",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBToken__TransferExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LiquidityConfigurations__InvalidConfig",
    type: "error"
  },
  { inputs: [], name: "OracleHelper__InvalidOracleId", type: "error" },
  {
    inputs: [],
    name: "OracleHelper__LookUpTimestampTooOld",
    type: "error"
  },
  { inputs: [], name: "OracleHelper__NewLengthTooSmall", type: "error" },
  { inputs: [], name: "PackedUint128Math__AddOverflow", type: "error" },
  {
    inputs: [],
    name: "PackedUint128Math__MultiplierTooLarge",
    type: "error"
  },
  { inputs: [], name: "PackedUint128Math__SubUnderflow", type: "error" },
  {
    inputs: [],
    name: "PairParametersHelper__InvalidParameter",
    type: "error"
  },
  { inputs: [], name: "ReentrancyGuard__ReentrantCall", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds40Bits", type: "error" },
  { inputs: [], name: "TokenHelper__TransferFailed", type: "error" },
  { inputs: [], name: "Uint128x128Math__LogUnderflow", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    inputs: [],
    name: "Uint256x256Math__MulShiftOverflow",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "CollectedProtocolFees",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "id",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "CompositionFees",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "amounts",
        type: "bytes32[]"
      }
    ],
    name: "DepositedToBins",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "activeId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amounts",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "FlashLoan",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "idReference",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "volatilityReference",
        type: "uint24"
      }
    ],
    name: "ForcedDecay",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "oracleLength",
        type: "uint16"
      }
    ],
    name: "OracleLengthIncreased",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "baseFactor",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "filterPeriod",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "decayPeriod",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "reductionFactor",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "protocolShare",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "StaticFeeParametersSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "id",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amountsIn",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amountsOut",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "volatilityAccumulator",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "amounts",
        type: "bytes32[]"
      }
    ],
    name: "WithdrawnFromBins",
    type: "event"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "bool", name: "approved", type: "bool" }
    ],
    name: "approveForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "accounts", type: "address[]" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "batchBalances",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    name: "batchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      {
        internalType: "uint256[]",
        name: "amountsToBurn",
        type: "uint256[]"
      }
    ],
    name: "burn",
    outputs: [
      { internalType: "bytes32[]", name: "amounts", type: "bytes32[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "collectProtocolFees",
    outputs: [
      {
        internalType: "bytes32",
        name: "collectedProtocolFees",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      { internalType: "bytes32", name: "amounts", type: "bytes32" },
      { internalType: "bytes", name: "data", type: "bytes" }
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getActiveId",
    outputs: [
      { internalType: "uint24", name: "activeId", type: "uint24" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "getBin",
    outputs: [
      { internalType: "uint128", name: "binReserveX", type: "uint128" },
      { internalType: "uint128", name: "binReserveY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getBinStep",
    outputs: [{ internalType: "uint16", name: "", type: "uint16" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    name: "getIdFromPrice",
    outputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bool", name: "swapForY", type: "bool" },
      { internalType: "uint24", name: "id", type: "uint24" }
    ],
    name: "getNextNonEmptyBin",
    outputs: [
      { internalType: "uint24", name: "nextId", type: "uint24" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOracleParameters",
    outputs: [
      { internalType: "uint8", name: "sampleLifetime", type: "uint8" },
      { internalType: "uint16", name: "size", type: "uint16" },
      { internalType: "uint16", name: "activeSize", type: "uint16" },
      { internalType: "uint40", name: "lastUpdated", type: "uint40" },
      { internalType: "uint40", name: "firstTimestamp", type: "uint40" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint40", name: "lookupTimestamp", type: "uint40" }
    ],
    name: "getOracleSampleAt",
    outputs: [
      { internalType: "uint64", name: "cumulativeId", type: "uint64" },
      {
        internalType: "uint64",
        name: "cumulativeVolatility",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "cumulativeBinCrossed",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "getPriceFromId",
    outputs: [
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getProtocolFees",
    outputs: [
      { internalType: "uint128", name: "protocolFeeX", type: "uint128" },
      { internalType: "uint128", name: "protocolFeeY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      { internalType: "uint128", name: "reserveX", type: "uint128" },
      { internalType: "uint128", name: "reserveY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getStaticFeeParameters",
    outputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapIn",
    outputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "uint128", name: "amountOutLeft", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapOut",
    outputs: [
      { internalType: "uint128", name: "amountInLeft", type: "uint128" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      { internalType: "contract IERC20", name: "tokenY", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getVariableFeeParameters",
    outputs: [
      {
        internalType: "uint24",
        name: "volatilityAccumulator",
        type: "uint24"
      },
      {
        internalType: "uint24",
        name: "volatilityReference",
        type: "uint24"
      },
      { internalType: "uint24", name: "idReference", type: "uint24" },
      { internalType: "uint40", name: "timeOfLastUpdate", type: "uint40" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "newLength", type: "uint16" }
    ],
    name: "increaseOracleLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      },
      { internalType: "uint24", name: "activeId", type: "uint24" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      {
        internalType: "bytes32[]",
        name: "liquidityConfigs",
        type: "bytes32[]"
      },
      { internalType: "address", name: "refundTo", type: "address" }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bytes32",
        name: "amountsReceived",
        type: "bytes32"
      },
      { internalType: "bytes32", name: "amountsLeft", type: "bytes32" },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "setStaticFeeParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bool", name: "swapForY", type: "bool" },
      { internalType: "address", name: "to", type: "address" }
    ],
    name: "swap",
    outputs: [
      { internalType: "bytes32", name: "amountsOut", type: "bytes32" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/json/LiquidityAmountsHelper.json
var LiquidityAmountsHelper_default = [
  { inputs: [], name: "LiquidityAmounts__LengthMismatch", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    inputs: [],
    name: "Uint256x256Math__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getAmountsAndLiquiditiesOf",
    outputs: [
      { internalType: "uint256[]", name: "amountsX", type: "uint256[]" },
      { internalType: "uint256[]", name: "amountsY", type: "uint256[]" },
      {
        internalType: "uint256[]",
        name: "liquidities",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "liquidities",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "totalSupplies",
        type: "uint256[]"
      },
      {
        internalType: "uint112[]",
        name: "binReservesX",
        type: "uint112[]"
      },
      {
        internalType: "uint112[]",
        name: "binReservesY",
        type: "uint112[]"
      }
    ],
    name: "getAmountsForLiquidities",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getAmountsOf",
    outputs: [
      { internalType: "uint256[]", name: "amountsX", type: "uint256[]" },
      { internalType: "uint256[]", name: "amountsY", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getBalanceOf",
    outputs: [
      { internalType: "uint256[]", name: "balances", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint112", name: "amountX", type: "uint112" },
      { internalType: "uint112", name: "amountY", type: "uint112" }
    ],
    name: "getLiquiditiesForAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "liquidities",
        type: "uint256[]"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getTotalAmountsOf",
    outputs: [
      { internalType: "uint256", name: "totalAmountX", type: "uint256" },
      { internalType: "uint256", name: "totalAmountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/json/LimitOrderManager.json
var LimitOrderManager_default = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory",
        type: "address"
      },
      {
        internalType: "contract IWNATIVE",
        name: "wNative",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "LimitOrderManager__InsufficientWithdrawalAmounts",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__InvalidBatchLength",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__InvalidExecutorFeeShare",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__InvalidNativeAmount",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__InvalidPair", type: "error" },
  {
    inputs: [],
    name: "LimitOrderManager__InvalidTokenOrder",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__OnlyFactoryOwner",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__OnlyWNative", type: "error" },
  {
    inputs: [],
    name: "LimitOrderManager__OrderAlreadyExecuted",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__OrderNotClaimable",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__OrderNotExecutable",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__OrderNotPlaced",
    type: "error"
  },
  {
    inputs: [],
    name: "LimitOrderManager__TransferFailed",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__ZeroAddress", type: "error" },
  { inputs: [], name: "LimitOrderManager__ZeroAmount", type: "error" },
  { inputs: [], name: "PackedUint128Math__SubUnderflow", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "ExecutionFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "executorFeeShare",
        type: "uint256"
      }
    ],
    name: "ExecutorFeeShareSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "binId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderCancelled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "binId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderClaimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "binId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint24",
        name: "binId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderPlaced",
    type: "event"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          {
            internalType: "uint256",
            name: "minAmountX",
            type: "uint256"
          },
          { internalType: "uint256", name: "minAmountY", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.CancelOrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchCancelOrders",
    outputs: [
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          {
            internalType: "uint256",
            name: "minAmountX",
            type: "uint256"
          },
          { internalType: "uint256", name: "minAmountY", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.CancelOrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchCancelOrdersSamePair",
    outputs: [
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchClaimOrders",
    outputs: [
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchClaimOrdersSamePair",
    outputs: [
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchExecuteOrders",
    outputs: [
      { internalType: "bool[]", name: "orderExecuted", type: "bool[]" },
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchExecuteOrdersSamePair",
    outputs: [
      { internalType: "bool[]", name: "orderExecuted", type: "bool[]" },
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "amount", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.PlaceOrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchPlaceOrders",
    outputs: [
      { internalType: "bool[]", name: "orderPlaced", type: "bool[]" },
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "amount", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.PlaceOrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchPlaceOrdersSamePair",
    outputs: [
      { internalType: "bool[]", name: "orderPlaced", type: "bool[]" },
      {
        internalType: "uint256[]",
        name: "orderPositionIds",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "minAmountX", type: "uint256" },
      { internalType: "uint256", name: "minAmountY", type: "uint256" }
    ],
    name: "cancelOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "orderPositionId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "claimOrder",
    outputs: [
      {
        internalType: "uint256",
        name: "orderPositionId",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "executeOrders",
    outputs: [
      { internalType: "bool", name: "executed", type: "bool" },
      { internalType: "uint256", name: "positionId", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getCurrentAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" },
      { internalType: "uint256", name: "executionFeeX", type: "uint256" },
      { internalType: "uint256", name: "executionFeeY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "getExecutionFee",
    outputs: [
      { internalType: "uint256", name: "fee", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getExecutorFeeShare",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      { internalType: "contract ILBFactory", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "getLastPositionId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "positionId",
            type: "uint256"
          },
          { internalType: "uint256", name: "liquidity", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.Order",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "positionId", type: "uint256" }
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "liquidity", type: "uint256" },
          { internalType: "uint128", name: "amount", type: "uint128" },
          { internalType: "bool", name: "withdrawn", type: "bool" }
        ],
        internalType: "struct ILimitOrderManager.Position",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [
      { internalType: "contract IERC20", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "isOrderExecutable",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "placeOrder",
    outputs: [
      { internalType: "bool", name: "orderPlaced", type: "bool" },
      {
        internalType: "uint256",
        name: "orderPositionId",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "executorFeeShare",
        type: "uint256"
      }
    ],
    name: "setExecutorFeeShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/json/APTFarm.json
var APTFarm_default = [
  {
    inputs: [
      { internalType: "contract IERC20", name: "_joe", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "APTFarm__EmptyArray", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "deposit", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountWithdrawn",
        type: "uint256"
      }
    ],
    name: "APTFarm__InsufficientDeposit",
    type: "error"
  },
  { inputs: [], name: "APTFarm__InvalidAPToken", type: "error" },
  { inputs: [], name: "APTFarm__InvalidFarmIndex", type: "error" },
  { inputs: [], name: "APTFarm__InvalidJoePerSec", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "apToken", type: "address" }
    ],
    name: "APTFarm__TokenAlreadyHasFarm",
    type: "error"
  },
  { inputs: [], name: "APTFarm__ZeroAddress", type: "error" },
  { inputs: [], name: "APTFarm__ZeroAmount", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocPoint",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "apToken",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "pids",
        type: "uint256[]"
      }
    ],
    name: "BatchHarvest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdraw",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unpaidAmount",
        type: "uint256"
      }
    ],
    name: "Harvest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocPoint",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "overwrite",
        type: "bool"
      }
    ],
    name: "Set",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Skim",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lastRewardTimestamp",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpSupply",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "accJoePerShare",
        type: "uint256"
      }
    ],
    name: "UpdateFarm",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "joePerSec", type: "uint256" },
      {
        internalType: "contract IERC20",
        name: "apToken",
        type: "address"
      },
      {
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      }
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "", type: "address" }
    ],
    name: "apTokenBalances",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "pid", type: "uint256" }],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "farmInfo",
    outputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "apToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "accJoePerShare",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lastRewardTimestamp",
            type: "uint256"
          },
          { internalType: "uint256", name: "joePerSec", type: "uint256" },
          {
            internalType: "contract IRewarder",
            name: "rewarder",
            type: "address"
          }
        ],
        internalType: "struct IAPTFarm.FarmInfo",
        name: "farm",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "farmLength",
    outputs: [
      { internalType: "uint256", name: "farms", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256[]", name: "pids", type: "uint256[]" }
    ],
    name: "harvestRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "apToken", type: "address" }
    ],
    name: "hasFarm",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [
      { internalType: "contract IERC20", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "pendingTokens",
    outputs: [
      { internalType: "uint256", name: "pendingJoe", type: "uint256" },
      {
        internalType: "address",
        name: "bonusTokenAddress",
        type: "address"
      },
      {
        internalType: "string",
        name: "bonusTokenSymbol",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "pendingBonusToken",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "joePerSec", type: "uint256" },
      {
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      },
      { internalType: "bool", name: "overwrite", type: "bool" }
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "address", name: "to", type: "address" }
    ],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newOwner", type: "address" }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "userInfo",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "uint256",
            name: "rewardDebt",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "unpaidRewards",
            type: "uint256"
          }
        ],
        internalType: "struct IAPTFarm.UserInfo",
        name: "info",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "apToken", type: "address" }
    ],
    name: "vaultFarmId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/json/APTFarmLens.json
var APTFarmLens_default = [
  {
    inputs: [
      {
        internalType: "contract IVaultFactory",
        name: "_vaultFactory",
        type: "address"
      },
      {
        internalType: "contract IAPTFarm",
        name: "_aptFarm",
        type: "address"
      },
      {
        internalType: "contract IJoeDexLens",
        name: "_dexLens",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "aptFarm",
    outputs: [
      { internalType: "contract IAPTFarm", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dexLens",
    outputs: [
      { internalType: "contract IJoeDexLens", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllVaults",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "vaultsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getAllVaultsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "vaultsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllVaultsWithFarms",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "farmsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getAllVaultsWithFarmsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "farmsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vaultType",
        type: "uint8"
      },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsFromType",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "vaultsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vaultType",
        type: "uint8"
      },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "vaultsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsWithFarms",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "farmsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsWithFarmsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "farmsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "vaultFactory",
    outputs: [
      {
        internalType: "contract IVaultFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/constants/internal.ts
var ZERO_HEX = "0x0";

// src/constants/v2Addrs.ts
import { ChainId } from "@traderjoe-xyz/sdk-core";
var MULTICALL_ADDRESS = {
  [ChainId.FUJI]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.AVALANCHE]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.ARBITRUM_ONE]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.ARB_GOERLI]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.BNB_CHAIN]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.BNB_TESTNET]: "0xcA11bde05977b3631167028862bE2a173976CA11",
  [ChainId.ETHEREUM]: "0xcA11bde05977b3631167028862bE2a173976CA11"
};
var LB_QUOTER_ADDRESS = {
  [ChainId.FUJI]: "0x2644fE413b8Fe94D69c4706455108368fa36354F",
  [ChainId.AVALANCHE]: "0x9dbf1706577636941ab5f443d2aebe251ccd1648",
  [ChainId.ARBITRUM_ONE]: "0x7f281f22eDB332807A039073a7F34A4A215bE89e",
  [ChainId.ARB_GOERLI]: "0x42B0D9a10ee9B96a599C98a618205d0288636762",
  [ChainId.BNB_CHAIN]: "0x89c71F2065aA505956a86FCadAE4a625A5b5e842",
  [ChainId.BNB_TESTNET]: "0x0996216AE051fE4B1d3258fE75b682E75d66E4C0",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LB_QUOTER_V21_ADDRESS = {
  [ChainId.FUJI]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.AVALANCHE]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.ARBITRUM_ONE]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.ARB_GOERLI]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.BNB_CHAIN]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.BNB_TESTNET]: "0xd76019A16606FDa4651f636D9751f500Ed776250",
  [ChainId.ETHEREUM]: "0x4d6Dbd1b52807C71b9a148E222b167247a7cA789"
};
var LB_ROUTER_ADDRESS = {
  [ChainId.FUJI]: "0x7b50046cEC8252ca835b148b1eDD997319120a12",
  [ChainId.AVALANCHE]: "0xE3Ffc583dC176575eEA7FD9dF2A7c65F7E23f4C3",
  [ChainId.ARBITRUM_ONE]: "0x7BFd7192E76D950832c77BB412aaE841049D8D9B",
  [ChainId.ARB_GOERLI]: "0x6E9603f925FB5A74f7321f51499d9633c1252893",
  [ChainId.BNB_CHAIN]: "0xb66A2704a0dabC1660941628BE987B4418f7a9E8",
  [ChainId.BNB_TESTNET]: "0xf7C6d73336f333b63144644944176072D94128F5",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LB_ROUTER_V21_ADDRESS = {
  [ChainId.FUJI]: "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30",
  [ChainId.AVALANCHE]: "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30",
  [ChainId.ARBITRUM_ONE]: "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30",
  [ChainId.ARB_GOERLI]: "0x095EEe81B0eC73797424d67e24adab20D5A5D307",
  [ChainId.BNB_CHAIN]: "0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30",
  [ChainId.BNB_TESTNET]: "0x8FABE13D95F28f7478Dc655d8D4BA99935D50e02",
  [ChainId.ETHEREUM]: "0x9A93a421b74F1c5755b83dD2C211614dC419C44b"
};
var LB_FACTORY_ADDRESS = {
  [ChainId.FUJI]: "0x6B8E020098cd1B3Ec9f811024bc24e51C660F768",
  [ChainId.AVALANCHE]: "0x6E77932A92582f504FF6c4BdbCef7Da6c198aEEf",
  [ChainId.ARBITRUM_ONE]: "0x1886D09C9Ade0c5DB822D85D21678Db67B6c2982",
  [ChainId.ARB_GOERLI]: "0xC8Af41e49e2C03eA14706C7aa9cEE60454bc5c03",
  [ChainId.BNB_CHAIN]: "0x43646A8e839B2f2766392C1BF8f60F6e587B6960",
  [ChainId.BNB_TESTNET]: "0xE082a032Fa1cE68b24594bee0fC57DfE819D107c",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LB_FACTORY_V21_ADDRESS = {
  [ChainId.FUJI]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.AVALANCHE]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.ARBITRUM_ONE]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.ARB_GOERLI]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.BNB_CHAIN]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.BNB_TESTNET]: "0x8e42f2F4101563bF679975178e880FD87d3eFd4e",
  [ChainId.ETHEREUM]: "0xDC8d77b69155c7E68A95a4fb0f06a71FF90B943a"
};
var DEXLENS_ADDRESS = {
  [ChainId.FUJI]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.AVALANCHE]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.ARBITRUM_ONE]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.ARB_GOERLI]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.BNB_CHAIN]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.BNB_TESTNET]: "0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973",
  [ChainId.ETHEREUM]: "0x3008D2C0A3b7C676ff8bd948fdE9B5fC6a26A56f"
};
var LB_REWARDER_ADDRESS = {
  [ChainId.FUJI]: "0x3e031f1486a27c997e85c5a2af2638ee3a4c28a1",
  [ChainId.AVALANCHE]: "0x624C5b9BEB13af6893e715932c26e2b7A59c410a",
  [ChainId.ARBITRUM_ONE]: "0x624C5b9BEB13af6893e715932c26e2b7A59c410a",
  [ChainId.ARB_GOERLI]: "0x3ca426d8743d46b99814cbf0929912a3ae398238",
  [ChainId.BNB_CHAIN]: "0x624C5b9BEB13af6893e715932c26e2b7A59c410a",
  [ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var VAULT_FACTORY_ADDRESS = {
  [ChainId.FUJI]: "0x0000000000000000000000000000000000000000",
  [ChainId.AVALANCHE]: "0x613aDdd55D30BF626c3009e9DAC66222346Ae760",
  [ChainId.ARBITRUM_ONE]: "0x613aDdd55D30BF626c3009e9DAC66222346Ae760",
  [ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [ChainId.BNB_CHAIN]: "0x613aDdd55D30BF626c3009e9DAC66222346Ae760",
  [ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LIQUIDITY_AMOUNTS_HELPER_ADDRESS = {
  [ChainId.FUJI]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.AVALANCHE]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.ARBITRUM_ONE]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.ARB_GOERLI]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.BNB_CHAIN]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.BNB_TESTNET]: "0x49D3D17b5349600A7206EE7f46218A1209a5c2B4",
  [ChainId.ETHEREUM]: "0x01A0f1D2a6E123b8ff909A2DdcE124973DAC121a"
};
var LIMIT_ORDER_MANAGER_ADDRESS = {
  [ChainId.FUJI]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.AVALANCHE]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.ARBITRUM_ONE]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.ARB_GOERLI]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.BNB_CHAIN]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.BNB_TESTNET]: "0x46bA84780f9a7b34C8B0E24Df07a260Fa952195D",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var APT_FARM_LENS = {
  [ChainId.FUJI]: "0x92a11f6E3d8b907F29d540E76D3C10Caa50279e6",
  [ChainId.AVALANCHE]: "0xeb84FA19b7912Fe2821f9fA4f5717A311B776C63",
  [ChainId.ARBITRUM_ONE]: "0xeb84FA19b7912Fe2821f9fA4f5717A311B776C63",
  [ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [ChainId.BNB_CHAIN]: "0xeb84FA19b7912Fe2821f9fA4f5717A311B776C63",
  [ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};

// src/constants/liquidityConfig.ts
import { parseEther } from "viem";
var spotUniform = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: [
    0,
    0,
    0,
    0,
    0,
    0.090909,
    0.181818,
    0.181818,
    0.181818,
    0.181818,
    0.181818
  ].map((el) => parseEther(`${el}`)),
  distributionY: [
    0.181818,
    0.181818,
    0.181818,
    0.181818,
    0.181818,
    0.090909,
    0,
    0,
    0,
    0,
    0
  ].map((el) => parseEther(`${el}`))
};
var curve = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: [0, 0, 0, 0, 0, 0.18, 0.3, 0.24, 0.16, 0.08, 0.04].map(
    (el) => parseEther(`${el}`)
  ),
  distributionY: [0.04, 0.08, 0.16, 0.24, 0.3, 0.18, 0, 0, 0, 0, 0].map(
    (el) => parseEther(`${el}`)
  )
};
var bidAsk = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: [0, 0, 0, 0, 0, 0.04, 0.12, 0.16, 0.2, 0.24, 0.24].map(
    (el) => parseEther(`${el}`)
  ),
  distributionY: [0.24, 0.24, 0.2, 0.16, 0.12, 0.04, 0, 0, 0, 0, 0].map(
    (el) => parseEther(`${el}`)
  )
};

// src/constants/subgraphs.ts
import { ChainId as ChainId2 } from "@traderjoe-xyz/sdk-core";
var DEX_V2_SUBGRAPH = {
  [ChainId2.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-fuji",
  [ChainId2.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2",
  [ChainId2.ARBITRUM_ONE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-arbitrum",
  [ChainId2.ARB_GOERLI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-arb-goerli",
  [ChainId2.BNB_CHAIN]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-bnb",
  [ChainId2.BNB_TESTNET]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-bnbtest",
  [ChainId2.ETHEREUM]: ""
};
var DEXCANDLES_SUBGRAPH_V2 = {
  [ChainId2.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dex-candles-v2-fuji",
  [ChainId2.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dex-candles-v2",
  [ChainId2.ARBITRUM_ONE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-arbitrum",
  [ChainId2.ARB_GOERLI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-arb-goerli",
  [ChainId2.BNB_CHAIN]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-bnb",
  [ChainId2.BNB_TESTNET]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-bnbtest",
  [ChainId2.ETHEREUM]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-eth"
};

// src/abis/ts/DexLens.ts
var DexLensABI = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "lbFactory",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyFactory",
        name: "lbLegacyFactory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "joeFactory",
        type: "address"
      },
      { internalType: "address", name: "wnative", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "JoeDexLens__AlreadyInitialized", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "pair", type: "address" },
      { internalType: "address", name: "collateral", type: "address" }
    ],
    name: "JoeDexLens__CollateralNotInPair",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dataFeed", type: "address" }
    ],
    name: "JoeDexLens__DataFeedAlreadyAdded",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dataFeed", type: "address" }
    ],
    name: "JoeDexLens__DataFeedNotInSet",
    type: "error"
  },
  { inputs: [], name: "JoeDexLens__InvalidChainLinkPrice", type: "error" },
  { inputs: [], name: "JoeDexLens__InvalidDataFeed", type: "error" },
  { inputs: [], name: "JoeDexLens__LengthsMismatch", type: "error" },
  { inputs: [], name: "JoeDexLens__NativeToken", type: "error" },
  { inputs: [], name: "JoeDexLens__NullWeight", type: "error" },
  { inputs: [], name: "JoeDexLens__SameDataFeed", type: "error" },
  { inputs: [], name: "JoeDexLens__SameTokens", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "pair", type: "address" },
      { internalType: "address", name: "token", type: "address" }
    ],
    name: "JoeDexLens__TokenNotInPair",
    type: "error"
  },
  { inputs: [], name: "JoeDexLens__UnknownDataFeedType", type: "error" },
  { inputs: [], name: "JoeDexLens__V1ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__V2ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__V2_1ContractNotSet", type: "error" },
  { inputs: [], name: "JoeDexLens__ZeroAddress", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__AccountAlreadyHasRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__AccountDoesNotHaveRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__OnlyOwnerOrRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__OnlyRole",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "bytes32", name: "role", type: "bytes32" }
    ],
    name: "SafeAccessControlEnumerable__RoleAlreadyGranted",
    type: "error"
  },
  { inputs: [], name: "SafeOwnable__OnlyOwner", type: "error" },
  { inputs: [], name: "SafeOwnable__OnlyPendingOwner", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulShiftOverflow", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        indexed: false,
        internalType: "struct IJoeDexLens.DataFeed",
        name: "dataFeed",
        type: "tuple"
      }
    ],
    name: "DataFeedAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      }
    ],
    name: "DataFeedRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "weight",
        type: "uint256"
      }
    ],
    name: "DataFeedsWeightSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "dfAddress",
        type: "address"
      }
    ],
    name: "NativeDataFeedSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "bytes32",
        name: "adminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      { indexed: true, internalType: "bytes32", name: "role", type: "bytes32" },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    inputs: [],
    name: "DATA_FEED_MANAGER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed",
        name: "dataFeed",
        type: "tuple"
      }
    ],
    name: "addDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed[]",
        name: "dataFeeds",
        type: "tuple[]"
      }
    ],
    name: "addDataFeeds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "getDataFeeds",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "collateralAddress",
            type: "address"
          },
          { internalType: "address", name: "dfAddress", type: "address" },
          { internalType: "uint88", name: "dfWeight", type: "uint88" },
          {
            internalType: "enum IJoeDexLens.DataFeedType",
            name: "dfType",
            type: "uint8"
          }
        ],
        internalType: "struct IJoeDexLens.DataFeed[]",
        name: "dataFeeds",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV1",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV2_1",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "factoryV2",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactoryV2",
    outputs: [
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyFactoryV2",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getRoleMemberAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleMemberCount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "getTokenPriceNative",
    outputs: [{ internalType: "uint256", name: "price", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "token", type: "address" }],
    name: "getTokenPriceUSD",
    outputs: [{ internalType: "uint256", name: "price", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address[]", name: "tokens", type: "address[]" }],
    name: "getTokensPricesNative",
    outputs: [{ internalType: "uint256[]", name: "prices", type: "uint256[]" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address[]", name: "tokens", type: "address[]" }],
    name: "getTokensPricesUSD",
    outputs: [{ internalType: "uint256[]", name: "prices", type: "uint256[]" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [{ internalType: "address", name: "wNative", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "aggregator", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dfAddress", type: "address" }
    ],
    name: "removeDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      { internalType: "address[]", name: "dfAddresses", type: "address[]" }
    ],
    name: "removeDataFeeds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "address", name: "dfAddress", type: "address" },
      { internalType: "uint88", name: "newWeight", type: "uint88" }
    ],
    name: "setDataFeedWeight",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "tokens", type: "address[]" },
      { internalType: "address[]", name: "dfAddresses", type: "address[]" },
      { internalType: "uint88[]", name: "newWeights", type: "uint88[]" }
    ],
    name: "setDataFeedsWeights",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "aggregator", type: "address" }],
    name: "setNativeDataFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/LBFactory.ts
var LBFactoryABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeRecipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_flashLoanFee",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__AddressZero",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__BinStepHasNoPreset",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lowerBound",
        type: "uint256"
      },
      {
        internalType: "uint16",
        name: "binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "higherBound",
        type: "uint256"
      }
    ],
    name: "LBFactory__BinStepRequirementsBreached",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "decayPeriod",
        type: "uint16"
      }
    ],
    name: "LBFactory__DecreasingPeriods",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__FactoryLockIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxFees",
        type: "uint256"
      }
    ],
    name: "LBFactory__FeesAboveMax",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxFees",
        type: "uint256"
      }
    ],
    name: "LBFactory__FlashLoanFeeAboveMax",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address"
      }
    ],
    name: "LBFactory__FunctionIsLockedForUsers",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      }
    ],
    name: "LBFactory__IdenticalAddresses",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__ImplementationNotSet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__LBPairAlreadyExists",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBFactory__LBPairNotCreated",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__LBPairSafetyCheckFailed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "LBFactory__ProtocolShareOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetAlreadyWhitelisted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "LBFactory__QuoteAssetNotWhitelisted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "LBFactory__ReductionFactorOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "LBFactory__SameFeeRecipient",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "flashLoanFee",
        type: "uint256"
      }
    ],
    name: "LBFactory__SameFlashLoanFee",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBFactory__SameImplementation",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NoPendingOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NotOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__NotPendingOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "PendingOwnable__PendingOwnerAlreadySet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds16Bits",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "unlocked",
        type: "bool"
      }
    ],
    name: "FactoryLockedStatusUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      }
    ],
    name: "FeeParametersSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFlashLoanFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFee",
        type: "uint256"
      }
    ],
    name: "FlashLoanFeeSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      }
    ],
    name: "LBPairCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "ignored",
        type: "bool"
      }
    ],
    name: "LBPairIgnoredStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldLBPairImplementation",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBPairImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "PresetRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleLifetime",
        type: "uint256"
      }
    ],
    name: "PresetSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetRemoved",
    type: "event"
  },
  {
    inputs: [],
    name: "LBPairImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_BIN_STEP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MAX_PROTOCOL_SHARE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MIN_BIN_STEP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_quoteAsset",
        type: "address"
      }
    ],
    name: "addQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "allLBPairs",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "createLBPair",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "creationUnlocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "flashLoanFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      }
    ],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllBinSteps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "presetsBinStep",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      }
    ],
    name: "getAllLBPairs",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          {
            internalType: "bool",
            name: "createdByOwner",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation[]",
        name: "LBPairsAvailable",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenA",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenB",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      }
    ],
    name: "getLBPairInformation",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "contract ILBPair",
            name: "LBPair",
            type: "address"
          },
          {
            internalType: "bool",
            name: "createdByOwner",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "ignoredForRouting",
            type: "bool"
          }
        ],
        internalType: "struct ILBFactory.LBPairInformation",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfLBPairs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfQuoteAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "getPreset",
    outputs: [
      {
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "maxVolatilityAccumulated",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "sampleLifetime",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256"
      }
    ],
    name: "getQuoteAsset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      }
    ],
    name: "isQuoteAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "removePreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_quoteAsset",
        type: "address"
      }
    ],
    name: "removeQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "revokePendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_locked",
        type: "bool"
      }
    ],
    name: "setFactoryLockedState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeRecipient",
        type: "address"
      }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_baseFactor",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_decayPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_variableFeeControl",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_maxVolatilityAccumulated",
        type: "uint24"
      }
    ],
    name: "setFeesParametersOnPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_flashLoanFee",
        type: "uint256"
      }
    ],
    name: "setFlashLoanFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_binStep",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_ignored",
        type: "bool"
      }
    ],
    name: "setLBPairIgnored",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_LBPairImplementation",
        type: "address"
      }
    ],
    name: "setLBPairImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pendingOwner_",
        type: "address"
      }
    ],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_baseFactor",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_filterPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_decayPeriod",
        type: "uint16"
      },
      {
        internalType: "uint16",
        name: "_reductionFactor",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_variableFeeControl",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_protocolShare",
        type: "uint16"
      },
      {
        internalType: "uint24",
        name: "_maxVolatilityAccumulated",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_sampleLifetime",
        type: "uint16"
      }
    ],
    name: "setPreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/LBPair.ts
var LBPairABI = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "_factory",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AddressZeroOrThis",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__AlreadyInitialized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__CompositionFactorFlawed",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__DistributionsOverflow",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanCallbackFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanTokenNotSupported",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__FlashLoanWrongFee",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__InsufficientAmounts",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__InsufficientLiquidityBurned",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBPair__InsufficientLiquidityMinted",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleSize",
        type: "uint256"
      }
    ],
    name: "LBPair__NewSizeTooSmall",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__OnlyFactory",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      },
      {
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "LBPair__OnlyFeeRecipient",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__OnlyStrictlyIncreasingId",
    type: "error"
  },
  {
    inputs: [],
    name: "LBPair__WrongLengths",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBToken__BurnExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__BurnFromAddress0",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "accountsLength",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idsLength",
        type: "uint256"
      }
    ],
    name: "LBToken__LengthMismatch",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__MintToAddress0",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__NotSupported",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "LBToken__SelfApproval",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "LBToken__SpenderNotApproved",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBToken__TransferExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__TransferFromOrToAddress0",
    type: "error"
  },
  {
    inputs: [],
    name: "LBToken__TransferToSelf",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minTimestamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_lookUpTimestamp",
        type: "uint256"
      }
    ],
    name: "Oracle__LookUpTimestampTooOld",
    type: "error"
  },
  {
    inputs: [],
    name: "Oracle__NotInitialized",
    type: "error"
  },
  {
    inputs: [],
    name: "ReentrancyGuardUpgradeable__AlreadyInitialized",
    type: "error"
  },
  {
    inputs: [],
    name: "ReentrancyGuardUpgradeable__ReentrantCall",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds112Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds128Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds24Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds40Bits",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__CallFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__NonContract",
    type: "error"
  },
  {
    inputs: [],
    name: "TokenHelper__TransferFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "TreeMath__ErrorDepthSearch",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feesY",
        type: "uint256"
      }
    ],
    name: "CompositionFee",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "DepositedToBin",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "FeesCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256"
      }
    ],
    name: "FlashLoan",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "previousSize",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newSize",
        type: "uint256"
      }
    ],
    name: "OracleSizeIncreased",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "ProtocolFeesCollected",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "swapForY",
        type: "bool"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "volatilityAccumulated",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fees",
        type: "uint256"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "TransferSingle",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawnFromBin",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_accounts",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "batchBalances",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "burn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "collectFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "collectProtocolFees",
    outputs: [
      {
        internalType: "uint128",
        name: "amountX",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "amountY",
        type: "uint128"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "feeParameters",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "binStep",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "baseFactor",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "filterPeriod",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "decayPeriod",
            type: "uint16"
          },
          {
            internalType: "uint16",
            name: "reductionFactor",
            type: "uint16"
          },
          {
            internalType: "uint24",
            name: "variableFeeControl",
            type: "uint24"
          },
          {
            internalType: "uint16",
            name: "protocolShare",
            type: "uint16"
          },
          {
            internalType: "uint24",
            name: "maxVolatilityAccumulated",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "volatilityAccumulated",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "volatilityReference",
            type: "uint24"
          },
          {
            internalType: "uint24",
            name: "indexRef",
            type: "uint24"
          },
          {
            internalType: "uint40",
            name: "time",
            type: "uint40"
          }
        ],
        internalType: "struct FeeHelper.FeeParameters",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "findFirstNonEmptyBinId",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBFlashLoanCallback",
        name: "_receiver",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes"
      }
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      }
    ],
    name: "getBin",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveY",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getGlobalFees",
    outputs: [
      {
        internalType: "uint128",
        name: "feesXTotal",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesYTotal",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesXProtocol",
        type: "uint128"
      },
      {
        internalType: "uint128",
        name: "feesYProtocol",
        type: "uint128"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOracleParameters",
    outputs: [
      {
        internalType: "uint256",
        name: "oracleSampleLifetime",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleActiveSize",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleLastTimestamp",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "oracleId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "min",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_timeDelta",
        type: "uint256"
      }
    ],
    name: "getOracleSampleFrom",
    outputs: [
      {
        internalType: "uint256",
        name: "cumulativeId",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "cumulativeVolatilityAccumulated",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "cumulativeBinCrossed",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getReservesAndId",
    outputs: [
      {
        internalType: "uint256",
        name: "reserveX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserveY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "activeId",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_newSize",
        type: "uint16"
      }
    ],
    name: "increaseOracleLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_sampleLifetime",
        type: "uint16"
      },
      {
        internalType: "bytes32",
        name: "_packedFeeParameters",
        type: "bytes32"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address"
      }
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_distributionX",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_distributionY",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      }
    ],
    name: "pendingFees",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address"
      },
      {
        internalType: "bool",
        name: "_approved",
        type: "bool"
      }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_packedFeeParameters",
        type: "bytes32"
      }
    ],
    name: "setFeesParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      }
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountXOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountYOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenX",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "tokenY",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256"
      }
    ],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/ts/LBQuoter.ts
var LBQuoterABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerV2",
        type: "address"
      },
      {
        internalType: "address",
        name: "_factoryV1",
        type: "address"
      },
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__AddressZero",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__IdenticalAddresses",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientAmount",
    type: "error"
  },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientLiquidity",
    type: "error"
  },
  {
    inputs: [],
    name: "LBQuoter_InvalidLength",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "factoryV1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_route",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      }
    ],
    name: "findBestPathFromAmountIn",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "pairs",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "fees",
            type: "uint256[]"
          }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_route",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      }
    ],
    name: "findBestPathFromAmountOut",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]"
          },
          {
            internalType: "address[]",
            name: "pairs",
            type: "address[]"
          },
          {
            internalType: "uint256[]",
            name: "binSteps",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "fees",
            type: "uint256[]"
          }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "routerV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/ts/LBQuoterV21.ts
var LBQuoterV21ABI = [
  {
    inputs: [
      { internalType: "address", name: "factoryV1", type: "address" },
      { internalType: "address", name: "legacyFactoryV2", type: "address" },
      { internalType: "address", name: "factoryV2", type: "address" },
      { internalType: "address", name: "legacyRouterV2", type: "address" },
      { internalType: "address", name: "routerV2", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "JoeLibrary__AddressZero", type: "error" },
  { inputs: [], name: "JoeLibrary__IdenticalAddresses", type: "error" },
  { inputs: [], name: "JoeLibrary__InsufficientAmount", type: "error" },
  { inputs: [], name: "JoeLibrary__InsufficientLiquidity", type: "error" },
  { inputs: [], name: "LBQuoter_InvalidLength", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulShiftOverflow", type: "error" },
  {
    inputs: [
      { internalType: "address[]", name: "route", type: "address[]" },
      { internalType: "uint128", name: "amountIn", type: "uint128" }
    ],
    name: "findBestPathFromAmountIn",
    outputs: [
      {
        components: [
          { internalType: "address[]", name: "route", type: "address[]" },
          { internalType: "address[]", name: "pairs", type: "address[]" },
          { internalType: "uint256[]", name: "binSteps", type: "uint256[]" },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          { internalType: "uint128[]", name: "amounts", type: "uint128[]" },
          {
            internalType: "uint128[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint128[]"
          },
          { internalType: "uint128[]", name: "fees", type: "uint128[]" }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "route", type: "address[]" },
      { internalType: "uint128", name: "amountOut", type: "uint128" }
    ],
    name: "findBestPathFromAmountOut",
    outputs: [
      {
        components: [
          { internalType: "address[]", name: "route", type: "address[]" },
          { internalType: "address[]", name: "pairs", type: "address[]" },
          { internalType: "uint256[]", name: "binSteps", type: "uint256[]" },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          { internalType: "uint128[]", name: "amounts", type: "uint128[]" },
          {
            internalType: "uint128[]",
            name: "virtualAmountsWithoutSlippage",
            type: "uint128[]"
          },
          { internalType: "uint128[]", name: "fees", type: "uint128[]" }
        ],
        internalType: "struct LBQuoter.Quote",
        name: "quote",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV1",
    outputs: [{ internalType: "address", name: "factoryV1", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactoryV2",
    outputs: [{ internalType: "address", name: "factoryV2", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactoryV2",
    outputs: [
      { internalType: "address", name: "legacyFactoryV2", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyRouterV2",
    outputs: [
      { internalType: "address", name: "legacyRouterV2", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getRouterV2",
    outputs: [{ internalType: "address", name: "routerV2", type: "address" }],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/ts/LBRouter.ts
var LBRouterABI = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "_factory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "_oldFactory",
        type: "address"
      },
      {
        internalType: "contract IWAVAX",
        name: "_wavax",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bp",
        type: "uint256"
      }
    ],
    name: "BinHelper__BinStepOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "id",
        type: "int256"
      }
    ],
    name: "BinHelper__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "BinHelper__IntOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountXMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountYMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "LBRouter__AmountSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBRouter__BinReserveOverflows",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__BrokenSwapSafetyCheck",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256"
      }
    ],
    name: "LBRouter__DeadlineExceeded",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "LBRouter__FailedToSendAVAX",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "idDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idSlippage",
        type: "uint256"
      }
    ],
    name: "LBRouter__IdDesiredOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "id",
        type: "int256"
      }
    ],
    name: "LBRouter__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activeIdDesired",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "idSlippage",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "activeId",
        type: "uint256"
      }
    ],
    name: "LBRouter__IdSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    name: "LBRouter__InsufficientAmountOut",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "wrongToken",
        type: "address"
      }
    ],
    name: "LBRouter__InvalidTokenPath",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__LengthsMismatch",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      }
    ],
    name: "LBRouter__MaxAmountInExceeded",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__NotFactoryOwner",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "LBRouter__PairNotCreated",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__SenderIsNotWAVAX",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "LBRouter__SwapOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "excess",
        type: "uint256"
      }
    ],
    name: "LBRouter__TooMuchTokensIn",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "reserve",
        type: "uint256"
      }
    ],
    name: "LBRouter__WrongAmounts",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "msgValue",
        type: "uint256"
      }
    ],
    name: "LBRouter__WrongAvaxLiquidityParameters",
    type: "error"
  },
  {
    inputs: [],
    name: "LBRouter__WrongTokenOrder",
    type: "error"
  },
  {
    inputs: [],
    name: "Math128x128__LogUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      },
      {
        internalType: "int256",
        name: "y",
        type: "int256"
      }
    ],
    name: "Math128x128__PowerUnderflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulDivOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__MulShiftOverflow",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256"
      }
    ],
    name: "Math512Bits__OffsetOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds128Bits",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256"
      }
    ],
    name: "SafeCast__Exceeds40Bits",
    type: "error"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "binStep",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountX",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountY",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "_liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "binStep",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountX",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountY",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "_liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_activeId",
        type: "uint24"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      }
    ],
    name: "createLBPair",
    outputs: [
      {
        internalType: "contract ILBPair",
        name: "pair",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256"
      }
    ],
    name: "getIdFromPrice",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint24",
        name: "_id",
        type: "uint24"
      }
    ],
    name: "getPriceFromId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "getSwapIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feesIn",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBPair",
        name: "_LBPair",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_swapForY",
        type: "bool"
      }
    ],
    name: "getSwapOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "feesIn",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "oldFactory",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "_tokenY",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_amountXMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountYMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "uint16",
        name: "_binStep",
        type: "uint16"
      },
      {
        internalType: "uint256",
        name: "_amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountAVAXMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "removeLiquidityAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountAVAX",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapAVAXForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMinAVAX",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAX",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMinAVAX",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountAVAXOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactAVAX",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_amountInMax",
        type: "uint256"
      },
      {
        internalType: "uint256[]",
        name: "_pairBinSteps",
        type: "uint256[]"
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256"
      }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBToken",
        name: "_lbToken",
        type: "address"
      },
      {
        internalType: "address",
        name: "_to",
        type: "address"
      },
      {
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]"
      }
    ],
    name: "sweepLBToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "wavax",
    outputs: [
      {
        internalType: "contract IWAVAX",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/abis/ts/LBRouterV21.ts
var LBRouterV21ABI = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory",
        type: "address"
      },
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyFactory",
        type: "address"
      },
      {
        internalType: "contract ILBLegacyRouter",
        name: "legacyRouter",
        type: "address"
      },
      {
        internalType: "contract IWNATIVE",
        name: "wnative",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "AddressHelper__CallFailed", type: "error" },
  { inputs: [], name: "AddressHelper__NonContract", type: "error" },
  { inputs: [], name: "JoeLibrary__InsufficientAmount", type: "error" },
  {
    inputs: [],
    name: "JoeLibrary__InsufficientLiquidity",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountSlippage", type: "uint256" }
    ],
    name: "LBRouter__AmountSlippageBPTooBig",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountXMin", type: "uint256" },
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountYMin", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "LBRouter__AmountSlippageCaught",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "LBRouter__BinReserveOverflows",
    type: "error"
  },
  { inputs: [], name: "LBRouter__BrokenSwapSafetyCheck", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "deadline", type: "uint256" },
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256"
      }
    ],
    name: "LBRouter__DeadlineExceeded",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBRouter__FailedToSendNATIVE",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "idDesired", type: "uint256" },
      { internalType: "uint256", name: "idSlippage", type: "uint256" }
    ],
    name: "LBRouter__IdDesiredOverflows",
    type: "error"
  },
  {
    inputs: [{ internalType: "int256", name: "id", type: "int256" }],
    name: "LBRouter__IdOverflows",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activeIdDesired",
        type: "uint256"
      },
      { internalType: "uint256", name: "idSlippage", type: "uint256" },
      { internalType: "uint256", name: "activeId", type: "uint256" }
    ],
    name: "LBRouter__IdSlippageCaught",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "uint256", name: "amountOut", type: "uint256" }
    ],
    name: "LBRouter__InsufficientAmountOut",
    type: "error"
  },
  {
    inputs: [{ internalType: "address", name: "wrongToken", type: "address" }],
    name: "LBRouter__InvalidTokenPath",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "version", type: "uint256" }],
    name: "LBRouter__InvalidVersion",
    type: "error"
  },
  { inputs: [], name: "LBRouter__LengthsMismatch", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      { internalType: "uint256", name: "amountIn", type: "uint256" }
    ],
    name: "LBRouter__MaxAmountInExceeded",
    type: "error"
  },
  { inputs: [], name: "LBRouter__NotFactoryOwner", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "tokenX", type: "address" },
      { internalType: "address", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBRouter__PairNotCreated",
    type: "error"
  },
  { inputs: [], name: "LBRouter__SenderIsNotWNATIVE", type: "error" },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "LBRouter__SwapOverflows",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "excess", type: "uint256" }],
    name: "LBRouter__TooMuchTokensIn",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amount", type: "uint256" },
      { internalType: "uint256", name: "reserve", type: "uint256" }
    ],
    name: "LBRouter__WrongAmounts",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "tokenX", type: "address" },
      { internalType: "address", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" },
      { internalType: "uint256", name: "msgValue", type: "uint256" }
    ],
    name: "LBRouter__WrongNativeLiquidityParameters",
    type: "error"
  },
  { inputs: [], name: "LBRouter__WrongTokenOrder", type: "error" },
  { inputs: [], name: "TokenHelper__TransferFailed", type: "error" },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint256", name: "binStep", type: "uint256" },
          { internalType: "uint256", name: "amountX", type: "uint256" },
          { internalType: "uint256", name: "amountY", type: "uint256" },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          { internalType: "address", name: "to", type: "address" },
          { internalType: "address", name: "refundTo", type: "address" },
          { internalType: "uint256", name: "deadline", type: "uint256" }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountXAdded", type: "uint256" },
      { internalType: "uint256", name: "amountYAdded", type: "uint256" },
      { internalType: "uint256", name: "amountXLeft", type: "uint256" },
      { internalType: "uint256", name: "amountYLeft", type: "uint256" },
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenX",
            type: "address"
          },
          {
            internalType: "contract IERC20",
            name: "tokenY",
            type: "address"
          },
          { internalType: "uint256", name: "binStep", type: "uint256" },
          { internalType: "uint256", name: "amountX", type: "uint256" },
          { internalType: "uint256", name: "amountY", type: "uint256" },
          {
            internalType: "uint256",
            name: "amountXMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "amountYMin",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "activeIdDesired",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "idSlippage",
            type: "uint256"
          },
          {
            internalType: "int256[]",
            name: "deltaIds",
            type: "int256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionX",
            type: "uint256[]"
          },
          {
            internalType: "uint256[]",
            name: "distributionY",
            type: "uint256[]"
          },
          { internalType: "address", name: "to", type: "address" },
          { internalType: "address", name: "refundTo", type: "address" },
          { internalType: "uint256", name: "deadline", type: "uint256" }
        ],
        internalType: "struct ILBRouter.LiquidityParameters",
        name: "liquidityParameters",
        type: "tuple"
      }
    ],
    name: "addLiquidityNATIVE",
    outputs: [
      { internalType: "uint256", name: "amountXAdded", type: "uint256" },
      { internalType: "uint256", name: "amountYAdded", type: "uint256" },
      { internalType: "uint256", name: "amountXLeft", type: "uint256" },
      { internalType: "uint256", name: "amountYLeft", type: "uint256" },
      {
        internalType: "uint256[]",
        name: "depositIds",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint24", name: "activeId", type: "uint24" },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "createLBPair",
    outputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "lbFactory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint256", name: "price", type: "uint256" }
    ],
    name: "getIdFromPrice",
    outputs: [{ internalType: "uint24", name: "", type: "uint24" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyFactory",
    outputs: [
      {
        internalType: "contract ILBLegacyFactory",
        name: "legacyLBfactory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLegacyRouter",
    outputs: [
      {
        internalType: "contract ILBLegacyRouter",
        name: "legacyRouter",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint24", name: "id", type: "uint24" }
    ],
    name: "getPriceFromId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapIn",
    outputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "uint128", name: "amountOutLeft", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" },
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapOut",
    outputs: [
      { internalType: "uint128", name: "amountInLeft", type: "uint128" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getV1Factory",
    outputs: [
      {
        internalType: "contract IJoeFactory",
        name: "factoryV1",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNATIVE",
    outputs: [
      {
        internalType: "contract IWNATIVE",
        name: "wnative",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint256", name: "amountXMin", type: "uint256" },
      { internalType: "uint256", name: "amountYMin", type: "uint256" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "amountNATIVEMin",
        type: "uint256"
      },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidityNATIVE",
    outputs: [
      { internalType: "uint256", name: "amountToken", type: "uint256" },
      { internalType: "uint256", name: "amountNATIVE", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactNATIVEForTokens",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountOutMinNATIVE",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForNATIVE",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountOutMinNATIVE",
        type: "uint256"
      },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokens",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapNATIVEForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountNATIVEOut",
        type: "uint256"
      },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address payable", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactNATIVE",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pairBinSteps",
            type: "uint256[]"
          },
          {
            internalType: "enum ILBRouter.Version[]",
            name: "versions",
            type: "uint8[]"
          },
          {
            internalType: "contract IERC20[]",
            name: "tokenPath",
            type: "address[]"
          }
        ],
        internalType: "struct ILBRouter.Path",
        name: "path",
        type: "tuple"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amountsIn", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "sweep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBToken",
        name: "lbToken",
        type: "address"
      },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    name: "sweepLBToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/ts/LBRewarder.ts
var LBRewarderABI = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      }
    ],
    name: "Rewarder__AlreadySetForEpoch",
    type: "error"
  },
  { inputs: [], name: "Rewarder__ClawbackDelayNotPassed", type: "error" },
  { inputs: [], name: "Rewarder__ClawbackDelayTooLow", type: "error" },
  { inputs: [], name: "Rewarder__EmptyMerkleEntries", type: "error" },
  { inputs: [], name: "Rewarder__EpochCanceled", type: "error" },
  { inputs: [], name: "Rewarder__EpochDoesNotExist", type: "error" },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      }
    ],
    name: "Rewarder__InsufficientBalance",
    type: "error"
  },
  { inputs: [], name: "Rewarder__InvalidAmount", type: "error" },
  { inputs: [], name: "Rewarder__InvalidEpoch", type: "error" },
  { inputs: [], name: "Rewarder__InvalidLength", type: "error" },
  { inputs: [], name: "Rewarder__InvalidProof", type: "error" },
  { inputs: [], name: "Rewarder__InvalidRoot", type: "error" },
  { inputs: [], name: "Rewarder__InvalidStart", type: "error" },
  {
    inputs: [],
    name: "Rewarder__MarketAlreadyWhitelisted",
    type: "error"
  },
  { inputs: [], name: "Rewarder__MarketNotWhitelisted", type: "error" },
  { inputs: [], name: "Rewarder__NativeTransferFailed", type: "error" },
  { inputs: [], name: "Rewarder__OnlyClaimForSelf", type: "error" },
  { inputs: [], name: "Rewarder__OnlyValidLatestEpoch", type: "error" },
  { inputs: [], name: "Rewarder__OverlappingEpoch", type: "error" },
  { inputs: [], name: "Rewarder__ZeroAddress", type: "error" },
  {
    inputs: [],
    name: "SafeAccessControl__DefaultAdminRoleBoundToOwner",
    type: "error"
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "SafeAccessControl__OnlyOwnerOrRole",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint96",
        name: "newClawbackDelay",
        type: "uint96"
      }
    ],
    name: "ClawbackDelayUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newClawbackRecipient",
        type: "address"
      }
    ],
    name: "ClawbackRecipientUpdated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "start",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "duration",
        type: "uint128"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32"
      }
    ],
    name: "EpochAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      }
    ],
    name: "EpochCanceled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8"
      }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      }
    ],
    name: "MarketAddedToWhitelist",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      }
    ],
    name: "MarketRemovedFromWhitelist",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "released",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unreleased",
        type: "uint256"
      }
    ],
    name: "RewardClaimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "epoch",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "clawbackAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RewardClawedBack",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "CLAWBACK_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "PAUSER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "UNPAUSER_ROLE",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "market", type: "address" }],
    name: "addMarketToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "batchClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "batchClawback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" }
    ],
    name: "cancelEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "clawback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "market", type: "address" },
          { internalType: "uint256", name: "epoch", type: "uint256" },
          {
            internalType: "contract IERC20Upgradeable",
            name: "token",
            type: "address"
          },
          { internalType: "address", name: "user", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]"
          }
        ],
        internalType: "struct IRewarder.MerkleEntry[]",
        name: "merkleEntries",
        type: "tuple[]"
      }
    ],
    name: "getBatchReleasableAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "releasableAmounts",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getClawbackParameters",
    outputs: [
      {
        internalType: "address",
        name: "clawbackRecipient",
        type: "address"
      },
      { internalType: "uint96", name: "clawbackDelay", type: "uint96" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" }
    ],
    name: "getEpochParameters",
    outputs: [
      {
        components: [
          { internalType: "bytes32", name: "root", type: "bytes32" },
          { internalType: "uint128", name: "start", type: "uint128" },
          { internalType: "uint128", name: "duration", type: "uint128" }
        ],
        internalType: "struct IRewarder.EpochParameters",
        name: "params",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "market", type: "address" }],
    name: "getNumberOfEpochs",
    outputs: [{ internalType: "uint256", name: "epochs", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfWhitelistedMarkets",
    outputs: [{ internalType: "uint256", name: "count", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "getReleasableAmount",
    outputs: [{ internalType: "uint256", name: "releasable", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getReleased",
    outputs: [{ internalType: "uint256", name: "released", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes32", name: "role", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
    name: "getWhitelistedMarket",
    outputs: [{ internalType: "address", name: "market", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint96", name: "clawbackDelay", type: "uint96" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "market", type: "address" }],
    name: "isMarketWhitelisted",
    outputs: [{ internalType: "bool", name: "isWhitelisted", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "market", type: "address" }],
    name: "removeMarketFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bytes32", name: "role", type: "bytes32" },
      { internalType: "address", name: "account", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint96", name: "newClawbackDelay", type: "uint96" }
    ],
    name: "setClawbackDelay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "newRecipient", type: "address" }
    ],
    name: "setClawbackRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      { internalType: "uint128", name: "start", type: "uint128" },
      { internalType: "uint128", name: "duration", type: "uint128" },
      {
        internalType: "contract IERC20Upgradeable[]",
        name: "tokens",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "totalAmountToRelease",
        type: "uint256[]"
      },
      { internalType: "bytes32", name: "root", type: "bytes32" }
    ],
    name: "setNewEpoch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "market", type: "address" },
      { internalType: "uint256", name: "epoch", type: "uint256" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]"
      }
    ],
    name: "verify",
    outputs: [{ internalType: "bool", name: "isValid", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/ts/Vault.ts
var VaultABI = [
  {
    inputs: [
      {
        internalType: "contract IVaultFactory",
        name: "factory",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "BaseVault__AlreadyWhitelisted",
    type: "error"
  },
  { inputs: [], name: "BaseVault__BurnMinShares", type: "error" },
  { inputs: [], name: "BaseVault__DepositsPaused", type: "error" },
  { inputs: [], name: "BaseVault__InvalidNativeAmount", type: "error" },
  { inputs: [], name: "BaseVault__InvalidRecipient", type: "error" },
  { inputs: [], name: "BaseVault__InvalidRound", type: "error" },
  { inputs: [], name: "BaseVault__InvalidShares", type: "error" },
  { inputs: [], name: "BaseVault__InvalidStrategy", type: "error" },
  { inputs: [], name: "BaseVault__InvalidToken", type: "error" },
  { inputs: [], name: "BaseVault__MaxSharesExceeded", type: "error" },
  { inputs: [], name: "BaseVault__NativeTransferFailed", type: "error" },
  { inputs: [], name: "BaseVault__NoNativeToken", type: "error" },
  { inputs: [], name: "BaseVault__NoQueuedWithdrawal", type: "error" },
  { inputs: [], name: "BaseVault__NotInEmergencyMode", type: "error" },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "BaseVault__NotWhitelisted",
    type: "error"
  },
  { inputs: [], name: "BaseVault__OnlyFactory", type: "error" },
  { inputs: [], name: "BaseVault__OnlyStrategy", type: "error" },
  { inputs: [], name: "BaseVault__OnlyWNative", type: "error" },
  { inputs: [], name: "BaseVault__SameStrategy", type: "error" },
  { inputs: [], name: "BaseVault__SameWhitelistState", type: "error" },
  { inputs: [], name: "BaseVault__Unauthorized", type: "error" },
  { inputs: [], name: "BaseVault__ZeroAmount", type: "error" },
  { inputs: [], name: "BaseVault__ZeroShares", type: "error" },
  { inputs: [], name: "SimpleVault__AmountsOverflow", type: "error" },
  { inputs: [], name: "SimpleVault__ZeroCross", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "Deposited",
    type: "event"
  },
  { anonymous: false, inputs: [], name: "DepositsPaused", type: "event" },
  { anonymous: false, inputs: [], name: "DepositsResumed", type: "event" },
  { anonymous: false, inputs: [], name: "EmergencyMode", type: "event" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdrawal",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint8", name: "version", type: "uint8" }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Recovered",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IStrategy",
        name: "strategy",
        type: "address"
      }
    ],
    name: "StrategySet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]"
      }
    ],
    name: "WhitelistAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]"
      }
    ],
    name: "WhitelistRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "bool", name: "state", type: "bool" }
    ],
    name: "WhitelistStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "WithdrawalCancelled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalQueuedQhares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawalExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      }
    ],
    name: "WithdrawalQueued",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "WithdrawalRedeemed",
    type: "event"
  },
  { stateMutability: "payable", type: "fallback" },
  {
    inputs: [
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "shares", type: "uint256" }],
    name: "cancelQueuedWithdrawal",
    outputs: [{ internalType: "uint256", name: "round", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "subtractedValue", type: "uint256" }
    ],
    name: "decreaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "deposit",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "depositNative",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "executeQueuedWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAumAnnualFee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getBalances",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentRound",
    outputs: [{ internalType: "uint256", name: "round", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getCurrentTotalQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "totalQueuedShares", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      { internalType: "contract IVaultFactory", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOperators",
    outputs: [
      { internalType: "address", name: "defaultOperator", type: "address" },
      { internalType: "address", name: "operator", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getPair",
    outputs: [{ internalType: "contract ILBPair", name: "", type: "address" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getQueuedWithdrawal",
    outputs: [{ internalType: "uint256", name: "shares", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getRange",
    outputs: [
      { internalType: "uint24", name: "low", type: "uint24" },
      { internalType: "uint24", name: "upper", type: "uint24" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getRedeemableAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getStrategy",
    outputs: [
      { internalType: "contract IStrategy", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "round", type: "uint256" }],
    name: "getTotalQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "totalQueuedShares", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "addedValue", type: "uint256" }
    ],
    name: "increaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "string", name: "name", type: "string" },
      { internalType: "string", name: "symbol", type: "string" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "isDepositsPaused",
    outputs: [{ internalType: "bool", name: "paused", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "isWhitelisted",
    outputs: [{ internalType: "bool", name: "whitelisted", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isWhitelistedOnly",
    outputs: [{ internalType: "bool", name: "whitelist", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pauseDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "shares", type: "uint256" }],
    name: "previewAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    name: "previewShares",
    outputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "uint256", name: "effectiveX", type: "uint256" },
      { internalType: "uint256", name: "effectiveY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "shares", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "queueWithdrawal",
    outputs: [{ internalType: "uint256", name: "round", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "redeemQueuedWithdrawal",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "round", type: "uint256" },
      { internalType: "address", name: "recipient", type: "address" }
    ],
    name: "redeemQueuedWithdrawalNative",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "resumeDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IStrategy",
        name: "newStrategy",
        type: "address"
      }
    ],
    name: "setStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "bool", name: "state", type: "bool" }],
    name: "setWhitelistState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/ts/VaultFactory.ts
var VaultFactoryABI = [
  {
    inputs: [{ internalType: "address", name: "wnative", type: "address" }],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "VaultFactory__InvalidDecimals", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidFeeRecipient", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidLength", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidOraclePrice", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidOwner", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidStrategy", type: "error" },
  { inputs: [], name: "VaultFactory__InvalidType", type: "error" },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "VaultFactory__StrategyImplementationNotSet",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "VaultFactory__VaultImplementationNotSet",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "defaultOperator",
        type: "address"
      }
    ],
    name: "DefaultOperatorSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint8", name: "version", type: "uint8" }
    ],
    name: "Initialized",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategy",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "strategyIndex",
        type: "uint256"
      }
    ],
    name: "StrategyCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "strategyImplementation",
        type: "address"
      }
    ],
    name: "StrategyImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "vaultIndex",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenY",
        type: "address"
      }
    ],
    name: "VaultCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      {
        indexed: true,
        internalType: "address",
        name: "vaultImplementation",
        type: "address"
      }
    ],
    name: "VaultImplementationSet",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "addToWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "vaults", type: "address[]" },
      { internalType: "uint256[]", name: "rounds", type: "uint256[]" },
      { internalType: "bool[]", name: "withdrawNative", type: "bool[]" }
    ],
    name: "batchRedeemQueuedWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" }
    ],
    name: "createDefaultStrategy",
    outputs: [{ internalType: "address", name: "strategy", type: "address" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "lbPair", type: "address" },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedX",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedY",
        type: "address"
      }
    ],
    name: "createOracleVault",
    outputs: [{ internalType: "address", name: "vault", type: "address" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "lbPair", type: "address" },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedX",
        type: "address"
      },
      {
        internalType: "contract IAggregatorV3",
        name: "dataFeedY",
        type: "address"
      }
    ],
    name: "createOracleVaultAndDefaultStrategy",
    outputs: [
      { internalType: "address", name: "vault", type: "address" },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "lbPair", type: "address" }
    ],
    name: "createSimpleVault",
    outputs: [{ internalType: "address", name: "vault", type: "address" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "lbPair", type: "address" }
    ],
    name: "createSimpleVaultAndDefaultStrategy",
    outputs: [
      { internalType: "address", name: "vault", type: "address" },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getDefaultOperator",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "getNumberOfStrategies",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "getNumberOfVaults",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getStrategyAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      }
    ],
    name: "getStrategyImplementation",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "strategy", type: "address" }],
    name: "getStrategyType",
    outputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      { internalType: "uint256", name: "index", type: "uint256" }
    ],
    name: "getVaultAt",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      }
    ],
    name: "getVaultImplementation",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "vault", type: "address" }],
    name: "getVaultType",
    outputs: [
      { internalType: "enum IVaultFactory.VaultType", name: "", type: "uint8" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "owner", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      { internalType: "address", name: "strategy", type: "address" }
    ],
    name: "linkVaultToStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" }
    ],
    name: "pauseDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "token",
        type: "address"
      },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "recoverERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      { internalType: "address[]", name: "addresses", type: "address[]" }
    ],
    name: "removeFromWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" }
    ],
    name: "resetPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" }
    ],
    name: "resumeDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "defaultOperator", type: "address" }
    ],
    name: "setDefaultOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" }
    ],
    name: "setEmergencyMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IStrategy", name: "strategy", type: "address" },
      { internalType: "address", name: "operator", type: "address" }
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      { internalType: "uint16", name: "pendingAumAnnualFee", type: "uint16" }
    ],
    name: "setPendingAumAnnualFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.StrategyType",
        name: "sType",
        type: "uint8"
      },
      {
        internalType: "address",
        name: "strategyImplementation",
        type: "address"
      }
    ],
    name: "setStrategyImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vType",
        type: "uint8"
      },
      { internalType: "address", name: "vaultImplementation", type: "address" }
    ],
    name: "setVaultImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IBaseVault", name: "vault", type: "address" },
      { internalType: "bool", name: "isWhitelisted", type: "bool" }
    ],
    name: "setWhitelistState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/LBFactoryV21.ts
var LBFactoryV21ABI = [
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" },
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "LBFactory__AddressZero", type: "error" },
  {
    inputs: [{ internalType: "uint256", name: "binStep", type: "uint256" }],
    name: "LBFactory__BinStepHasNoPreset",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint256", name: "binStep", type: "uint256" }],
    name: "LBFactory__BinStepTooLow",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "fees", type: "uint256" },
      { internalType: "uint256", name: "maxFees", type: "uint256" }
    ],
    name: "LBFactory__FlashLoanFeeAboveMax",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" }
    ],
    name: "LBFactory__IdenticalAddresses",
    type: "error"
  },
  { inputs: [], name: "LBFactory__ImplementationNotSet", type: "error" },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "_binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairAlreadyExists",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairDoesNotExist",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__LBPairNotCreated",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "LBPairImplementation", type: "address" }
    ],
    name: "LBFactory__LBPairSafetyCheckFailed",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "LBFactory__PresetIsLockedForUsers",
    type: "error"
  },
  {
    inputs: [],
    name: "LBFactory__PresetOpenStateIsAlreadyInTheSameState",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "quoteAsset", type: "address" }
    ],
    name: "LBFactory__QuoteAssetAlreadyWhitelisted",
    type: "error"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "quoteAsset", type: "address" }
    ],
    name: "LBFactory__QuoteAssetNotWhitelisted",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "LBFactory__SameFeeRecipient",
    type: "error"
  },
  {
    inputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    name: "LBFactory__SameFlashLoanFee",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "LBPairImplementation", type: "address" }
    ],
    name: "LBFactory__SameImplementation",
    type: "error"
  },
  { inputs: [], name: "PairParametersHelper__InvalidParameter", type: "error" },
  { inputs: [], name: "PendingOwnable__AddressZero", type: "error" },
  { inputs: [], name: "PendingOwnable__NoPendingOwner", type: "error" },
  { inputs: [], name: "PendingOwnable__NotOwner", type: "error" },
  { inputs: [], name: "PendingOwnable__NotPendingOwner", type: "error" },
  { inputs: [], name: "PendingOwnable__PendingOwnerAlreadySet", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds16Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newRecipient",
        type: "address"
      }
    ],
    name: "FeeRecipientSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFlashLoanFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFee",
        type: "uint256"
      }
    ],
    name: "FlashLoanFeeSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      { indexed: false, internalType: "uint256", name: "pid", type: "uint256" }
    ],
    name: "LBPairCreated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "LBPair",
        type: "address"
      },
      { indexed: false, internalType: "bool", name: "ignored", type: "bool" }
    ],
    name: "LBPairIgnoredStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldLBPairImplementation",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "LBPairImplementation",
        type: "address"
      }
    ],
    name: "LBPairImplementationSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pendingOwner",
        type: "address"
      }
    ],
    name: "PendingOwnerSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      { indexed: true, internalType: "bool", name: "isOpen", type: "bool" }
    ],
    name: "PresetOpenStateChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      }
    ],
    name: "PresetRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "binStep",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "filterPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "decayPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reductionFactor",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "variableFeeControl",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolShare",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxVolatilityAccumulator",
        type: "uint256"
      }
    ],
    name: "PresetSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "quoteAsset",
        type: "address"
      }
    ],
    name: "QuoteAssetRemoved",
    type: "event"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "quoteAsset", type: "address" }
    ],
    name: "addQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "becomeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint24", name: "activeId", type: "uint24" },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "createLBPair",
    outputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract ILBPair", name: "pair", type: "address" }
    ],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllBinSteps",
    outputs: [
      {
        internalType: "uint256[]",
        name: "binStepWithPreset",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" }
    ],
    name: "getAllLBPairs",
    outputs: [
      {
        components: [
          { internalType: "uint16", name: "binStep", type: "uint16" },
          { internalType: "contract ILBPair", name: "LBPair", type: "address" },
          { internalType: "bool", name: "createdByOwner", type: "bool" },
          { internalType: "bool", name: "ignoredForRouting", type: "bool" }
        ],
        internalType: "struct ILBFactory.LBPairInformation[]",
        name: "lbPairsAvailable",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFlashLoanFee",
    outputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
    name: "getLBPairAtIndex",
    outputs: [
      { internalType: "contract ILBPair", name: "lbPair", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getLBPairImplementation",
    outputs: [
      { internalType: "address", name: "lbPairImplementation", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenA", type: "address" },
      { internalType: "contract IERC20", name: "tokenB", type: "address" },
      { internalType: "uint256", name: "binStep", type: "uint256" }
    ],
    name: "getLBPairInformation",
    outputs: [
      {
        components: [
          { internalType: "uint16", name: "binStep", type: "uint16" },
          { internalType: "contract ILBPair", name: "LBPair", type: "address" },
          { internalType: "bool", name: "createdByOwner", type: "bool" },
          { internalType: "bool", name: "ignoredForRouting", type: "bool" }
        ],
        internalType: "struct ILBFactory.LBPairInformation",
        name: "lbPairInformation",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getMaxFlashLoanFee",
    outputs: [{ internalType: "uint256", name: "maxFee", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getMinBinStep",
    outputs: [{ internalType: "uint256", name: "minBinStep", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfLBPairs",
    outputs: [
      { internalType: "uint256", name: "lbPairNumber", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getNumberOfQuoteAssets",
    outputs: [
      { internalType: "uint256", name: "numberOfQuoteAssets", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOpenBinSteps",
    outputs: [
      { internalType: "uint256[]", name: "openBinStep", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "binStep", type: "uint256" }],
    name: "getPreset",
    outputs: [
      { internalType: "uint256", name: "baseFactor", type: "uint256" },
      { internalType: "uint256", name: "filterPeriod", type: "uint256" },
      { internalType: "uint256", name: "decayPeriod", type: "uint256" },
      { internalType: "uint256", name: "reductionFactor", type: "uint256" },
      { internalType: "uint256", name: "variableFeeControl", type: "uint256" },
      { internalType: "uint256", name: "protocolShare", type: "uint256" },
      {
        internalType: "uint256",
        name: "maxVolatilityAccumulator",
        type: "uint256"
      },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
    name: "getQuoteAssetAtIndex",
    outputs: [
      { internalType: "contract IERC20", name: "asset", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" }
    ],
    name: "isQuoteAsset",
    outputs: [{ internalType: "bool", name: "isQuote", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint16", name: "binStep", type: "uint16" }],
    name: "removePreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "quoteAsset", type: "address" }
    ],
    name: "removeQuoteAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "revokePendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "feeRecipient", type: "address" }
    ],
    name: "setFeeRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      { internalType: "uint24", name: "variableFeeControl", type: "uint24" },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "setFeesParametersOnPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "flashLoanFee", type: "uint256" }
    ],
    name: "setFlashLoanFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "bool", name: "ignored", type: "bool" }
    ],
    name: "setLBPairIgnored",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newLBPairImplementation",
        type: "address"
      }
    ],
    name: "setLBPairImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "pendingOwner_", type: "address" }
    ],
    name: "setPendingOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      { internalType: "uint24", name: "variableFeeControl", type: "uint24" },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    name: "setPreset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "bool", name: "isOpen", type: "bool" }
    ],
    name: "setPresetOpenState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/LBPairV21.ts
var LBPairV21ABI = [
  {
    inputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory_",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "AddressHelper__CallFailed", type: "error" },
  { inputs: [], name: "AddressHelper__NonContract", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "BinHelper__CompositionFactorFlawed",
    type: "error"
  },
  { inputs: [], name: "BinHelper__LiquidityOverflow", type: "error" },
  { inputs: [], name: "FeeHelper__FeeOverflow", type: "error" },
  { inputs: [], name: "LBPair__AddressZero", type: "error" },
  { inputs: [], name: "LBPair__AlreadyInitialized", type: "error" },
  { inputs: [], name: "LBPair__EmptyMarketConfigs", type: "error" },
  { inputs: [], name: "LBPair__FlashLoanCallbackFailed", type: "error" },
  {
    inputs: [],
    name: "LBPair__FlashLoanInsufficientAmount",
    type: "error"
  },
  { inputs: [], name: "LBPair__InsufficientAmountIn", type: "error" },
  { inputs: [], name: "LBPair__InsufficientAmountOut", type: "error" },
  { inputs: [], name: "LBPair__InvalidInput", type: "error" },
  {
    inputs: [],
    name: "LBPair__InvalidStaticFeeParameters",
    type: "error"
  },
  { inputs: [], name: "LBPair__MaxTotalFeeExceeded", type: "error" },
  { inputs: [], name: "LBPair__OnlyFactory", type: "error" },
  { inputs: [], name: "LBPair__OnlyProtocolFeeRecipient", type: "error" },
  { inputs: [], name: "LBPair__OutOfLiquidity", type: "error" },
  { inputs: [], name: "LBPair__TokenNotSupported", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroAmount",
    type: "error"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroAmountsOut",
    type: "error"
  },
  { inputs: [], name: "LBPair__ZeroBorrowAmount", type: "error" },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "LBPair__ZeroShares",
    type: "error"
  },
  { inputs: [], name: "LBToken__AddressThisOrZero", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBToken__BurnExceedsBalance",
    type: "error"
  },
  { inputs: [], name: "LBToken__InvalidLength", type: "error" },
  {
    inputs: [{ internalType: "address", name: "owner", type: "address" }],
    name: "LBToken__SelfApproval",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "LBToken__SpenderNotApproved",
    type: "error"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "LBToken__TransferExceedsBalance",
    type: "error"
  },
  {
    inputs: [],
    name: "LiquidityConfigurations__InvalidConfig",
    type: "error"
  },
  { inputs: [], name: "OracleHelper__InvalidOracleId", type: "error" },
  {
    inputs: [],
    name: "OracleHelper__LookUpTimestampTooOld",
    type: "error"
  },
  { inputs: [], name: "OracleHelper__NewLengthTooSmall", type: "error" },
  { inputs: [], name: "PackedUint128Math__AddOverflow", type: "error" },
  {
    inputs: [],
    name: "PackedUint128Math__MultiplierTooLarge",
    type: "error"
  },
  { inputs: [], name: "PackedUint128Math__SubUnderflow", type: "error" },
  {
    inputs: [],
    name: "PairParametersHelper__InvalidParameter",
    type: "error"
  },
  { inputs: [], name: "ReentrancyGuard__ReentrantCall", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds40Bits", type: "error" },
  { inputs: [], name: "TokenHelper__TransferFailed", type: "error" },
  { inputs: [], name: "Uint128x128Math__LogUnderflow", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    inputs: [],
    name: "Uint256x256Math__MulShiftOverflow",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool"
      }
    ],
    name: "ApprovalForAll",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "feeRecipient",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "CollectedProtocolFees",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "id",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "CompositionFees",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "amounts",
        type: "bytes32[]"
      }
    ],
    name: "DepositedToBins",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "activeId",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amounts",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "FlashLoan",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "idReference",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "volatilityReference",
        type: "uint24"
      }
    ],
    name: "ForcedDecay",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "oracleLength",
        type: "uint16"
      }
    ],
    name: "OracleLengthIncreased",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "baseFactor",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "filterPeriod",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "decayPeriod",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "reductionFactor",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "protocolShare",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "StaticFeeParametersSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "id",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amountsIn",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "amountsOut",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint24",
        name: "volatilityAccumulator",
        type: "uint24"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "totalFees",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "protocolFees",
        type: "bytes32"
      }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]"
      }
    ],
    name: "TransferBatch",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]"
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "amounts",
        type: "bytes32[]"
      }
    ],
    name: "WithdrawnFromBins",
    type: "event"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "bool", name: "approved", type: "bool" }
    ],
    name: "approveForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "account", type: "address" },
      { internalType: "uint256", name: "id", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address[]", name: "accounts", type: "address[]" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "batchBalances",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    name: "batchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      {
        internalType: "uint256[]",
        name: "amountsToBurn",
        type: "uint256[]"
      }
    ],
    name: "burn",
    outputs: [
      { internalType: "bytes32[]", name: "amounts", type: "bytes32[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "collectProtocolFees",
    outputs: [
      {
        internalType: "bytes32",
        name: "collectedProtocolFees",
        type: "bytes32"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract ILBFlashLoanCallback",
        name: "receiver",
        type: "address"
      },
      { internalType: "bytes32", name: "amounts", type: "bytes32" },
      { internalType: "bytes", name: "data", type: "bytes" }
    ],
    name: "flashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "forceDecay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getActiveId",
    outputs: [{ internalType: "uint24", name: "activeId", type: "uint24" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "getBin",
    outputs: [
      { internalType: "uint128", name: "binReserveX", type: "uint128" },
      { internalType: "uint128", name: "binReserveY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getBinStep",
    outputs: [{ internalType: "uint16", name: "", type: "uint16" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract ILBFactory",
        name: "factory",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "price", type: "uint256" }],
    name: "getIdFromPrice",
    outputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bool", name: "swapForY", type: "bool" },
      { internalType: "uint24", name: "id", type: "uint24" }
    ],
    name: "getNextNonEmptyBin",
    outputs: [{ internalType: "uint24", name: "nextId", type: "uint24" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOracleParameters",
    outputs: [
      { internalType: "uint8", name: "sampleLifetime", type: "uint8" },
      { internalType: "uint16", name: "size", type: "uint16" },
      { internalType: "uint16", name: "activeSize", type: "uint16" },
      { internalType: "uint40", name: "lastUpdated", type: "uint40" },
      { internalType: "uint40", name: "firstTimestamp", type: "uint40" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint40", name: "lookupTimestamp", type: "uint40" }
    ],
    name: "getOracleSampleAt",
    outputs: [
      { internalType: "uint64", name: "cumulativeId", type: "uint64" },
      {
        internalType: "uint64",
        name: "cumulativeVolatility",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "cumulativeBinCrossed",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint24", name: "id", type: "uint24" }],
    name: "getPriceFromId",
    outputs: [{ internalType: "uint256", name: "price", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getProtocolFees",
    outputs: [
      { internalType: "uint128", name: "protocolFeeX", type: "uint128" },
      { internalType: "uint128", name: "protocolFeeY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      { internalType: "uint128", name: "reserveX", type: "uint128" },
      { internalType: "uint128", name: "reserveY", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getStaticFeeParameters",
    outputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapIn",
    outputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "uint128", name: "amountOutLeft", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint128", name: "amountIn", type: "uint128" },
      { internalType: "bool", name: "swapForY", type: "bool" }
    ],
    name: "getSwapOut",
    outputs: [
      { internalType: "uint128", name: "amountInLeft", type: "uint128" },
      { internalType: "uint128", name: "amountOut", type: "uint128" },
      { internalType: "uint128", name: "fee", type: "uint128" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenX",
    outputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getTokenY",
    outputs: [
      { internalType: "contract IERC20", name: "tokenY", type: "address" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "getVariableFeeParameters",
    outputs: [
      {
        internalType: "uint24",
        name: "volatilityAccumulator",
        type: "uint24"
      },
      {
        internalType: "uint24",
        name: "volatilityReference",
        type: "uint24"
      },
      { internalType: "uint24", name: "idReference", type: "uint24" },
      { internalType: "uint40", name: "timeOfLastUpdate", type: "uint40" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint16", name: "newLength", type: "uint16" }],
    name: "increaseOracleLength",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      },
      { internalType: "uint24", name: "activeId", type: "uint24" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      {
        internalType: "bytes32[]",
        name: "liquidityConfigs",
        type: "bytes32[]"
      },
      { internalType: "address", name: "refundTo", type: "address" }
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bytes32",
        name: "amountsReceived",
        type: "bytes32"
      },
      { internalType: "bytes32", name: "amountsLeft", type: "bytes32" },
      {
        internalType: "uint256[]",
        name: "liquidityMinted",
        type: "uint256[]"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint16", name: "baseFactor", type: "uint16" },
      { internalType: "uint16", name: "filterPeriod", type: "uint16" },
      { internalType: "uint16", name: "decayPeriod", type: "uint16" },
      { internalType: "uint16", name: "reductionFactor", type: "uint16" },
      {
        internalType: "uint24",
        name: "variableFeeControl",
        type: "uint24"
      },
      { internalType: "uint16", name: "protocolShare", type: "uint16" },
      {
        internalType: "uint24",
        name: "maxVolatilityAccumulator",
        type: "uint24"
      }
    ],
    name: "setStaticFeeParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "bool", name: "swapForY", type: "bool" },
      { internalType: "address", name: "to", type: "address" }
    ],
    name: "swap",
    outputs: [{ internalType: "bytes32", name: "amountsOut", type: "bytes32" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "id", type: "uint256" }],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/ts/LiquidityAmountsHelper.ts
var LiquidityAmountsHelperABI = [
  { inputs: [], name: "LiquidityAmounts__LengthMismatch", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds24Bits", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "int256", name: "y", type: "int256" }
    ],
    name: "Uint128x128Math__PowUnderflow",
    type: "error"
  },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulShiftOverflow", type: "error" },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getAmountsAndLiquiditiesOf",
    outputs: [
      { internalType: "uint256[]", name: "amountsX", type: "uint256[]" },
      { internalType: "uint256[]", name: "amountsY", type: "uint256[]" },
      { internalType: "uint256[]", name: "liquidities", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256[]", name: "liquidities", type: "uint256[]" },
      { internalType: "uint256[]", name: "totalSupplies", type: "uint256[]" },
      { internalType: "uint112[]", name: "binReservesX", type: "uint112[]" },
      { internalType: "uint112[]", name: "binReservesY", type: "uint112[]" }
    ],
    name: "getAmountsForLiquidities",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getAmountsOf",
    outputs: [
      { internalType: "uint256[]", name: "amountsX", type: "uint256[]" },
      { internalType: "uint256[]", name: "amountsY", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getBalanceOf",
    outputs: [
      { internalType: "uint256[]", name: "balances", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      { internalType: "uint112", name: "amountX", type: "uint112" },
      { internalType: "uint112", name: "amountY", type: "uint112" }
    ],
    name: "getLiquiditiesForAmounts",
    outputs: [
      { internalType: "uint256[]", name: "liquidities", type: "uint256[]" }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256[]", name: "ids", type: "uint256[]" },
      { internalType: "address", name: "LBPair", type: "address" }
    ],
    name: "getTotalAmountsOf",
    outputs: [
      { internalType: "uint256", name: "totalAmountX", type: "uint256" },
      { internalType: "uint256", name: "totalAmountY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/abis/ts/LimitOrderManager.ts
var LimitOrderManagerABI = [
  {
    inputs: [
      { internalType: "contract ILBFactory", name: "factory", type: "address" },
      { internalType: "contract IWNATIVE", name: "wNative", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "LimitOrderManager__InsufficientWithdrawalAmounts",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__InvalidBatchLength", type: "error" },
  {
    inputs: [],
    name: "LimitOrderManager__InvalidExecutorFeeShare",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__InvalidNativeAmount", type: "error" },
  { inputs: [], name: "LimitOrderManager__InvalidPair", type: "error" },
  { inputs: [], name: "LimitOrderManager__InvalidTokenOrder", type: "error" },
  { inputs: [], name: "LimitOrderManager__OnlyFactoryOwner", type: "error" },
  { inputs: [], name: "LimitOrderManager__OnlyWNative", type: "error" },
  {
    inputs: [],
    name: "LimitOrderManager__OrderAlreadyExecuted",
    type: "error"
  },
  { inputs: [], name: "LimitOrderManager__OrderNotClaimable", type: "error" },
  { inputs: [], name: "LimitOrderManager__OrderNotExecutable", type: "error" },
  { inputs: [], name: "LimitOrderManager__OrderNotPlaced", type: "error" },
  { inputs: [], name: "LimitOrderManager__TransferFailed", type: "error" },
  { inputs: [], name: "LimitOrderManager__ZeroAddress", type: "error" },
  { inputs: [], name: "LimitOrderManager__ZeroAmount", type: "error" },
  { inputs: [], name: "PackedUint128Math__SubUnderflow", type: "error" },
  { inputs: [], name: "SafeCast__Exceeds128Bits", type: "error" },
  { inputs: [], name: "Uint256x256Math__MulDivOverflow", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenX",
        type: "address"
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenY",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "ExecutionFeePaid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "executorFeeShare",
        type: "uint256"
      }
    ],
    name: "ExecutorFeeShareSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      { indexed: true, internalType: "uint24", name: "binId", type: "uint24" },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderCancelled",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      { indexed: true, internalType: "uint24", name: "binId", type: "uint24" },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderClaimed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      { indexed: true, internalType: "uint24", name: "binId", type: "uint24" },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderExecuted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "contract ILBPair",
        name: "lbPair",
        type: "address"
      },
      { indexed: true, internalType: "uint24", name: "binId", type: "uint24" },
      {
        indexed: false,
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionId",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountX",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountY",
        type: "uint256"
      }
    ],
    name: "OrderPlaced",
    type: "event"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "contract IERC20", name: "tokenX", type: "address" },
          { internalType: "contract IERC20", name: "tokenY", type: "address" },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "minAmountX", type: "uint256" },
          { internalType: "uint256", name: "minAmountY", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.CancelOrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchCancelOrders",
    outputs: [
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "minAmountX", type: "uint256" },
          { internalType: "uint256", name: "minAmountY", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.CancelOrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchCancelOrdersSamePair",
    outputs: [
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "contract IERC20", name: "tokenX", type: "address" },
          { internalType: "contract IERC20", name: "tokenY", type: "address" },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchClaimOrders",
    outputs: [
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchClaimOrdersSamePair",
    outputs: [
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "contract IERC20", name: "tokenX", type: "address" },
          { internalType: "contract IERC20", name: "tokenY", type: "address" },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchExecuteOrders",
    outputs: [
      { internalType: "bool[]", name: "orderExecuted", type: "bool[]" },
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" }
        ],
        internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchExecuteOrdersSamePair",
    outputs: [
      { internalType: "bool[]", name: "orderExecuted", type: "bool[]" },
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          { internalType: "contract IERC20", name: "tokenX", type: "address" },
          { internalType: "contract IERC20", name: "tokenY", type: "address" },
          { internalType: "uint16", name: "binStep", type: "uint16" },
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "amount", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.PlaceOrderParams[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchPlaceOrders",
    outputs: [
      { internalType: "bool[]", name: "orderPlaced", type: "bool[]" },
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        components: [
          {
            internalType: "enum ILimitOrderManager.OrderType",
            name: "orderType",
            type: "uint8"
          },
          { internalType: "uint24", name: "binId", type: "uint24" },
          { internalType: "uint256", name: "amount", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.PlaceOrderParamsSamePair[]",
        name: "orders",
        type: "tuple[]"
      }
    ],
    name: "batchPlaceOrdersSamePair",
    outputs: [
      { internalType: "bool[]", name: "orderPlaced", type: "bool[]" },
      { internalType: "uint256[]", name: "orderPositionIds", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "minAmountX", type: "uint256" },
      { internalType: "uint256", name: "minAmountY", type: "uint256" }
    ],
    name: "cancelOrder",
    outputs: [
      { internalType: "uint256", name: "orderPositionId", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "claimOrder",
    outputs: [
      { internalType: "uint256", name: "orderPositionId", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "executeOrders",
    outputs: [
      { internalType: "bool", name: "executed", type: "bool" },
      { internalType: "uint256", name: "positionId", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getCurrentAmounts",
    outputs: [
      { internalType: "uint256", name: "amountX", type: "uint256" },
      { internalType: "uint256", name: "amountY", type: "uint256" },
      { internalType: "uint256", name: "executionFeeX", type: "uint256" },
      { internalType: "uint256", name: "executionFeeY", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" }
    ],
    name: "getExecutionFee",
    outputs: [{ internalType: "uint256", name: "fee", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getExecutorFeeShare",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      { internalType: "contract ILBFactory", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "getLastPositionId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "positionId", type: "uint256" },
          { internalType: "uint256", name: "liquidity", type: "uint256" }
        ],
        internalType: "struct ILimitOrderManager.Order",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "positionId", type: "uint256" }
    ],
    name: "getPosition",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "liquidity", type: "uint256" },
          { internalType: "uint128", name: "amount", type: "uint128" },
          { internalType: "bool", name: "withdrawn", type: "bool" }
        ],
        internalType: "struct ILimitOrderManager.Position",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getWNative",
    outputs: [{ internalType: "contract IERC20", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" }
    ],
    name: "isOrderExecutable",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "tokenX", type: "address" },
      { internalType: "contract IERC20", name: "tokenY", type: "address" },
      { internalType: "uint16", name: "binStep", type: "uint16" },
      {
        internalType: "enum ILimitOrderManager.OrderType",
        name: "orderType",
        type: "uint8"
      },
      { internalType: "uint24", name: "binId", type: "uint24" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "placeOrder",
    outputs: [
      { internalType: "bool", name: "orderPlaced", type: "bool" },
      { internalType: "uint256", name: "orderPositionId", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "executorFeeShare", type: "uint256" }
    ],
    name: "setExecutorFeeShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/ts/APTFarm.ts
var APTFarmABI = [
  {
    inputs: [
      { internalType: "contract IERC20", name: "_joe", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  { inputs: [], name: "APTFarm__EmptyArray", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "deposit", type: "uint256" },
      {
        internalType: "uint256",
        name: "amountWithdrawn",
        type: "uint256"
      }
    ],
    name: "APTFarm__InsufficientDeposit",
    type: "error"
  },
  { inputs: [], name: "APTFarm__InvalidAPToken", type: "error" },
  { inputs: [], name: "APTFarm__InvalidFarmIndex", type: "error" },
  { inputs: [], name: "APTFarm__InvalidJoePerSec", type: "error" },
  {
    inputs: [{ internalType: "address", name: "apToken", type: "address" }],
    name: "APTFarm__TokenAlreadyHasFarm",
    type: "error"
  },
  { inputs: [], name: "APTFarm__ZeroAddress", type: "error" },
  { inputs: [], name: "APTFarm__ZeroAmount", type: "error" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocPoint",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "apToken",
        type: "address"
      },
      {
        indexed: true,
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "pids",
        type: "uint256[]"
      }
    ],
    name: "BatchHarvest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdraw",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unpaidAmount",
        type: "uint256"
      }
    ],
    name: "Harvest",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "allocPoint",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      },
      {
        indexed: false,
        internalType: "bool",
        name: "overwrite",
        type: "bool"
      }
    ],
    name: "Set",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Skim",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lastRewardTimestamp",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpSupply",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "accJoePerShare",
        type: "uint256"
      }
    ],
    name: "UpdateFarm",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "joePerSec", type: "uint256" },
      {
        internalType: "contract IERC20",
        name: "apToken",
        type: "address"
      },
      {
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      }
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "contract IERC20", name: "", type: "address" }],
    name: "apTokenBalances",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "pid", type: "uint256" }],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "index", type: "uint256" }],
    name: "farmInfo",
    outputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "apToken",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "accJoePerShare",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "lastRewardTimestamp",
            type: "uint256"
          },
          { internalType: "uint256", name: "joePerSec", type: "uint256" },
          {
            internalType: "contract IRewarder",
            name: "rewarder",
            type: "address"
          }
        ],
        internalType: "struct IAPTFarm.FarmInfo",
        name: "farm",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "farmLength",
    outputs: [{ internalType: "uint256", name: "farms", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256[]", name: "pids", type: "uint256[]" }],
    name: "harvestRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "apToken", type: "address" }],
    name: "hasFarm",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [{ internalType: "contract IERC20", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "pendingTokens",
    outputs: [
      { internalType: "uint256", name: "pendingJoe", type: "uint256" },
      {
        internalType: "address",
        name: "bonusTokenAddress",
        type: "address"
      },
      {
        internalType: "string",
        name: "bonusTokenSymbol",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "pendingBonusToken",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "joePerSec", type: "uint256" },
      {
        internalType: "contract IRewarder",
        name: "rewarder",
        type: "address"
      },
      { internalType: "bool", name: "overwrite", type: "bool" }
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20", name: "token", type: "address" },
      { internalType: "address", name: "to", type: "address" }
    ],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "index", type: "uint256" },
      { internalType: "address", name: "user", type: "address" }
    ],
    name: "userInfo",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "amount", type: "uint256" },
          {
            internalType: "uint256",
            name: "rewardDebt",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "unpaidRewards",
            type: "uint256"
          }
        ],
        internalType: "struct IAPTFarm.UserInfo",
        name: "info",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "apToken", type: "address" }],
    name: "vaultFarmId",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "pid", type: "uint256" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/APTFarmLens.ts
var APTFarmLensABI = [
  {
    inputs: [
      {
        internalType: "contract IVaultFactory",
        name: "_vaultFactory",
        type: "address"
      },
      {
        internalType: "contract IAPTFarm",
        name: "_aptFarm",
        type: "address"
      },
      {
        internalType: "contract IJoeDexLens",
        name: "_dexLens",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "aptFarm",
    outputs: [{ internalType: "contract IAPTFarm", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "dexLens",
    outputs: [
      { internalType: "contract IJoeDexLens", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllVaults",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "vaultsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getAllVaultsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "vaultsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getAllVaultsWithFarms",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "farmsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getAllVaultsWithFarmsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "farmsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vaultType",
        type: "uint8"
      },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsFromType",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "vaultsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      {
        internalType: "enum IVaultFactory.VaultType",
        name: "vaultType",
        type: "uint8"
      },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "vaultsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsWithFarms",
    outputs: [
      {
        components: [
          {
            internalType: "contract IBaseVault",
            name: "vault",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.VaultType",
            name: "vaultType",
            type: "uint8"
          },
          {
            internalType: "contract IStrategy",
            name: "strategy",
            type: "address"
          },
          {
            internalType: "enum IVaultFactory.StrategyType",
            name: "strategyType",
            type: "uint8"
          },
          {
            internalType: "bool",
            name: "isDepositsPaused",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "isInEmergencyMode",
            type: "bool"
          },
          { internalType: "address", name: "lbPair", type: "address" },
          {
            internalType: "uint256",
            name: "lbPairBinStep",
            type: "uint256"
          },
          { internalType: "address", name: "tokenX", type: "address" },
          { internalType: "address", name: "tokenY", type: "address" },
          {
            internalType: "uint256",
            name: "tokenXBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "tokenYBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "vaultBalanceUSD",
            type: "uint256"
          },
          { internalType: "bool", name: "hasFarm", type: "bool" },
          {
            components: [
              {
                internalType: "uint256",
                name: "farmId",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "joePerSec",
                type: "uint256"
              },
              {
                internalType: "contract IRewarder",
                name: "rewarder",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "aptBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "aptBalanceUSD",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmData",
            name: "farmData",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultData[]",
        name: "farmsData",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "user", type: "address" },
      { internalType: "uint256", name: "startId", type: "uint256" },
      { internalType: "uint256", name: "pageSize", type: "uint256" }
    ],
    name: "getPaginatedVaultsWithFarmsIncludingUserInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IBaseVault",
                name: "vault",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.VaultType",
                name: "vaultType",
                type: "uint8"
              },
              {
                internalType: "contract IStrategy",
                name: "strategy",
                type: "address"
              },
              {
                internalType: "enum IVaultFactory.StrategyType",
                name: "strategyType",
                type: "uint8"
              },
              {
                internalType: "bool",
                name: "isDepositsPaused",
                type: "bool"
              },
              {
                internalType: "bool",
                name: "isInEmergencyMode",
                type: "bool"
              },
              {
                internalType: "address",
                name: "lbPair",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "lbPairBinStep",
                type: "uint256"
              },
              {
                internalType: "address",
                name: "tokenX",
                type: "address"
              },
              {
                internalType: "address",
                name: "tokenY",
                type: "address"
              },
              {
                internalType: "uint256",
                name: "tokenXBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "tokenYBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "totalSupply",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "vaultBalanceUSD",
                type: "uint256"
              },
              { internalType: "bool", name: "hasFarm", type: "bool" },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              }
            ],
            internalType: "struct IAPTFarmLens.VaultData",
            name: "vaultData",
            type: "tuple"
          },
          {
            internalType: "uint256",
            name: "userBalance",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "userBalanceUSD",
            type: "uint256"
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "farmId",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "joePerSec",
                    type: "uint256"
                  },
                  {
                    internalType: "contract IRewarder",
                    name: "rewarder",
                    type: "address"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalance",
                    type: "uint256"
                  },
                  {
                    internalType: "uint256",
                    name: "aptBalanceUSD",
                    type: "uint256"
                  }
                ],
                internalType: "struct IAPTFarmLens.FarmData",
                name: "farmData",
                type: "tuple"
              },
              {
                internalType: "uint256",
                name: "userBalance",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "userBalanceUSD",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingJoe",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "pendingBonusToken",
                type: "uint256"
              }
            ],
            internalType: "struct IAPTFarmLens.FarmDataWithUserInfo",
            name: "farmDataWithUserInfo",
            type: "tuple"
          }
        ],
        internalType: "struct IAPTFarmLens.VaultDataWithUserInfo[]",
        name: "farmsDataWithUserInfo",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "vaultFactory",
    outputs: [
      {
        internalType: "contract IVaultFactory",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/v2entities/bin.ts
var Bin = class {
  /**
   * @static
   * Returns the price of bin given its id and the bin step
   *
   * @param {number} id - The bin id
   * @param {number} binStep
   * @returns {number}
   */
  static getPriceFromId(id, binStep) {
    return (1 + binStep / 1e4) ** (id - 8388608);
  }
  /**
   * @static
   * Returns the bin id given its price and the bin step
   *
   * @param {number} price - The price of the bin
   * @param {number} binStep
   * @returns {number}
   */
  static getIdFromPrice(price, binStep) {
    return Math.trunc(Math.log(price) / Math.log(1 + binStep / 1e4)) + 8388608;
  }
  /**
   * @static
   * Returns idSlippage given slippage tolerance and the bin step
   *
   * @param {number} priceSlippage
   * @param {number} binStep
   * @returns {number}
   */
  static getIdSlippageFromPriceSlippage(priceSlippage, binStep) {
    return Math.floor(
      Math.log(1 + priceSlippage) / Math.log(1 + binStep / 1e4)
    );
  }
};

// src/v2entities/pair.ts
import flatMap from "lodash.flatmap";
import JSBI from "jsbi";
import {
  Fraction,
  ONE
} from "@traderjoe-xyz/sdk-core";

// src/utils/hex.ts
import invariant from "tiny-invariant";
import warning from "tiny-warning";
import { getAddress } from "viem";
function validateAndParseAddress(address) {
  try {
    const checksummedAddress = getAddress(address);
    warning(address === checksummedAddress, `${address} is not checksummed.`);
    return checksummedAddress;
  } catch (error) {
    invariant(false, `${address} is not a valid address.`);
  }
}
function toHex(currencyAmount) {
  return `0x${currencyAmount.raw.toString(16)}`;
}
function isZero(hexNumberString) {
  return /^0x0*$/.test(hexNumberString);
}

// src/types/pair.ts
var LiquidityDistribution = /* @__PURE__ */ ((LiquidityDistribution2) => {
  LiquidityDistribution2[LiquidityDistribution2["SPOT"] = 0] = "SPOT";
  LiquidityDistribution2[LiquidityDistribution2["CURVE"] = 1] = "CURVE";
  LiquidityDistribution2[LiquidityDistribution2["BID_ASK"] = 2] = "BID_ASK";
  return LiquidityDistribution2;
})(LiquidityDistribution || {});

// src/utils/liquidityDistribution.ts
import { parseEther as parseEther2 } from "viem";
var getLiquidityConfig = (distribution) => {
  switch (distribution) {
    case 0 /* SPOT */:
      return spotUniform;
    case 1 /* CURVE */:
      return curve;
    case 2 /* BID_ASK */:
      return bidAsk;
  }
};
var getDistributionFromTargetBin = (activeId, targetBin) => {
  return {
    deltaIds: [targetBin - activeId],
    distributionX: targetBin >= activeId ? [parseEther2("1")] : [parseEther2("0")],
    distributionY: targetBin <= activeId ? [parseEther2("1")] : [parseEther2("0")]
  };
};
var normalizeDist = (dist, sumTo, precision) => {
  const sumDist = dist.reduce((sum, cur) => sum + cur, BigInt(0));
  if (sumDist === BigInt(0)) {
    return dist;
  }
  const factor = sumDist * precision / sumTo;
  const normalized = dist.map((d) => d * precision / factor);
  return normalized;
};
var getUniformDistributionFromBinRange = (activeId, binRange, parsedAmounts) => {
  const [parsedAmountA, parsedAmountB] = parsedAmounts;
  let deltaIds = [], _distributionX = [], _distributionY = [];
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === "0") {
    const negDelta = binRange[1] - binRange[0] + 1;
    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map((el) => -1 * (el + 1));
    deltaIds = [...negativeDeltaIds];
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [...Array(deltaIds.length).fill(0)];
    _distributionY = [...Array(negDelta).fill(1 / negDelta)];
  } else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === "0") {
    const posDelta = binRange[1] - binRange[0] + 1;
    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map((el) => el + 1);
    deltaIds = [...positiveDeltaIds];
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    _distributionX = [...Array(posDelta).fill(1 / posDelta)];
    _distributionY = [...Array(deltaIds.length).fill(0)];
  } else {
    const negDelta = activeId - binRange[0];
    const posDelta = binRange[1] - activeId;
    const negativeDeltaIds = Array.from(Array(negDelta).keys()).reverse().map((el) => -1 * (el + 1));
    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(
      (el) => el + 1
    );
    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];
    const posPctPerBin = 1 / (0.5 + posDelta);
    const negPctPerBin = 1 / (0.5 + negDelta);
    _distributionX = [
      ...Array(negDelta).fill(0),
      posPctPerBin / 2,
      ...Array(posDelta).fill(posPctPerBin)
    ];
    _distributionY = [
      ...Array(negDelta).fill(negPctPerBin),
      negPctPerBin / 2,
      ...Array(posDelta).fill(0)
    ];
  }
  return {
    deltaIds,
    distributionX: _distributionX.map(
      (el) => parseDistributionValue(el, parsedAmountA.currency.decimals)
    ),
    distributionY: _distributionY.map(
      (el) => parseDistributionValue(el, parsedAmountB.currency.decimals)
    )
  };
};
var getBidAskDistributionFromBinRange = (activeId, binRange, parsedAmounts) => {
  const [parsedAmountA, parsedAmountB] = parsedAmounts;
  let deltaIds = [], _distributionX = [], _distributionY = [];
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === "0") {
    const negDelta = binRange[1] - binRange[0] + 1;
    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map((el) => -1 * (el + 1));
    deltaIds = [...negativeDeltaIds];
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [...Array(deltaIds.length).fill(0)];
    const rSquare = Math.pow(deltaIds[0], 2);
    _distributionY = deltaIds.map((i) => (i - 1) * -2 / rSquare);
  } else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === "0") {
    const posDelta = binRange[1] - binRange[0] + 1;
    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map((el) => el + 1);
    deltaIds = [...positiveDeltaIds];
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    const rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);
    _distributionX = deltaIds.map((i) => (i + 1) * 2 / rSquare);
    _distributionY = [...Array(deltaIds.length).fill(0)];
  } else {
    const negDelta = activeId - binRange[0];
    const posDelta = binRange[1] - activeId;
    const negativeDeltaIds = Array.from(Array(negDelta).keys()).reverse().map((el) => -1 * (el + 1));
    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(
      (el) => el + 1
    );
    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];
    const rSquareX = Math.pow(positiveDeltaIds[positiveDeltaIds.length - 1], 2);
    _distributionX = [
      ...Array(negDelta).fill(0),
      1 / rSquareX,
      ...positiveDeltaIds.map((i) => (i + 1) / rSquareX)
    ];
    const rSquareY = Math.pow(negativeDeltaIds[0], 2);
    _distributionY = [
      ...negativeDeltaIds.map((i) => -1 * (i - 1) / rSquareY),
      1 / rSquareY,
      ...Array(posDelta).fill(0)
    ];
  }
  return {
    deltaIds,
    distributionX: _distributionX.map(
      (el) => parseDistributionValue(el, parsedAmountA.currency.decimals)
    ),
    distributionY: _distributionY.map(
      (el) => parseDistributionValue(el, parsedAmountB.currency.decimals)
    )
  };
};
var getCurveDistributionFromBinRange = (activeId, binRange, parsedAmounts) => {
  const [parsedAmountA, parsedAmountB] = parsedAmounts;
  let deltaIds = [], _distributionX = [], _distributionY = [];
  const getSigma = (_R) => {
    const factor = _R >= 20 ? 2 : _R >= 15 ? 1.8 : _R >= 10 ? 1.7 : _R >= 8 ? 1.6 : _R >= 6 ? 1.5 : _R >= 5 ? 1.4 : 1;
    return _R / factor;
  };
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === "0") {
    const negDelta = binRange[1] - binRange[0] + 1;
    const negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map((el) => -1 * (el + 1));
    deltaIds = [...negativeDeltaIds];
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [...Array(deltaIds.length).fill(0)];
    const R = deltaIds.length - 1;
    const sigma = getSigma(R);
    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);
    _distributionY = deltaIds.map(
      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2))
    );
  } else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === "0") {
    const posDelta = binRange[1] - binRange[0] + 1;
    const positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map((el) => el + 1);
    deltaIds = [...positiveDeltaIds];
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    _distributionY = [...Array(deltaIds.length).fill(0)];
    const R = deltaIds.length - 1;
    const sigma = getSigma(R);
    const A = 1 / (Math.sqrt(Math.PI * 2) * sigma);
    _distributionX = deltaIds.map(
      (_, ind) => 2 * A * Math.exp(-0.5 * Math.pow(ind / sigma, 2))
    );
  } else {
    const negDelta = activeId - binRange[0];
    const posDelta = binRange[1] - activeId;
    const negativeDeltaIds = Array.from(Array(negDelta).keys()).reverse().map((el) => -1 * (el + 1));
    const positiveDeltaIds = Array.from(Array(posDelta).keys()).map(
      (el) => el + 1
    );
    deltaIds = [...negativeDeltaIds, 0, ...positiveDeltaIds];
    const RX = positiveDeltaIds.length;
    const sigmaX = getSigma(RX);
    const AX = 1 / (Math.sqrt(Math.PI * 2) * sigmaX);
    _distributionX = [
      ...Array(negDelta).fill(0),
      AX,
      ...positiveDeltaIds.map(
        (_, ind) => 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2))
      )
    ];
    const RY = negativeDeltaIds.length;
    const sigmaY = getSigma(RY);
    const AY = 1 / (Math.sqrt(Math.PI * 2) * sigmaY);
    _distributionY = [
      ...negativeDeltaIds.map(
        (_, ind) => 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2))
      ),
      AY,
      ...Array(posDelta).fill(0)
    ];
  }
  return {
    deltaIds,
    distributionX: _distributionX.map(
      (el) => parseDistributionValue(el, parsedAmountA.currency.decimals)
    ),
    distributionY: _distributionY.map(
      (el) => parseDistributionValue(el, parsedAmountB.currency.decimals)
    )
  };
};
var parseDistributionValue = (value, decimals) => {
  return parseEther2(`${parseFloat(value.toFixed(decimals))}`);
};

// src/v2entities/pair.ts
import { getAddress as getAddress2 } from "viem";
var PairV2 = class _PairV2 {
  constructor(tokenA, tokenB) {
    if (tokenA.sortsBefore(tokenB)) {
      this.token0 = tokenA;
      this.token1 = tokenB;
    } else {
      this.token0 = tokenB;
      this.token1 = tokenA;
    }
  }
  /**
   * Returns all available LBPairs for this pair
   *
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {Promise<LBPair[]>}
   */
  async fetchAvailableLBPairs(isV21, publicClient, chainId) {
    const args = [
      getAddress2(this.token0.address),
      getAddress2(this.token1.address)
    ];
    return isV21 ? await publicClient.readContract({
      abi: LBFactoryV21ABI,
      address: LB_FACTORY_V21_ADDRESS[chainId],
      functionName: "getAllLBPairs",
      args
    }) : await publicClient.readContract({
      abi: LBFactoryABI,
      address: LB_FACTORY_ADDRESS[chainId],
      functionName: "getAllLBPairs",
      args
    });
  }
  /**
   * Fetches LBPair for token0, token1, and given binStep
   *
   * @param {number} binStep
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {Promise<LBPair>}
   */
  async fetchLBPair(binStep, isV21, publicClient, chainId) {
    const args = [
      getAddress2(this.token0.address),
      getAddress2(this.token1.address),
      BigInt(binStep)
    ];
    let lbPair;
    if (isV21) {
      lbPair = await publicClient.readContract({
        abi: LBFactoryV21ABI,
        address: LB_FACTORY_V21_ADDRESS[chainId],
        functionName: "getLBPairInformation",
        args
      });
    } else {
      lbPair = await publicClient.readContract({
        abi: LBFactoryABI,
        address: LB_FACTORY_ADDRESS[chainId],
        functionName: "getLBPairInformation",
        args
      });
    }
    return lbPair;
  }
  /**
   * Checks whether this pair equals to that provided in the param
   *
   * @param {PairV2} pair
   * @returns {boolean} true if equal, otherwise false
   */
  equals(pair) {
    if (this.token0.address === pair.token0.address && this.token1.address === pair.token1.address) {
      return true;
    }
    return false;
  }
  /**
   * @static
   * Returns all possible combination of token pairs
   *
   * @param {Token} inputToken
   * @param {Token} outputToken
   * @param {Token[]} bases
   * @returns {[Token, Token][]}
   */
  static createAllTokenPairs(inputToken, outputToken, bases) {
    const basePairs = flatMap(
      bases,
      (base) => bases.map((otherBase) => [base, otherBase])
    ).filter(([t0, t1]) => t0.address !== t1.address);
    const allTokenPairs = [
      // the direct pair
      [inputToken, outputToken],
      // token A against all bases
      ...bases.map((base) => [inputToken, base]),
      // token B against all bases
      ...bases.map((base) => [outputToken, base]),
      // each base against all bases
      ...basePairs
    ].filter(
      (tokens) => Boolean(tokens[0] && tokens[1])
    ).filter(([t0, t1]) => t0.address !== t1.address);
    return allTokenPairs;
  }
  /**
   * @static
   * Returns the initialized pairs given a list of token pairs
   *
   * @param {[Token, Token][]} tokenPairs
   * @returns {PairV2[]}
   */
  static initPairs(tokenPairs) {
    const allPairs = tokenPairs.map((tokenPair) => {
      return new _PairV2(tokenPair[0], tokenPair[1]);
    });
    const uniquePairs = [];
    allPairs.forEach((pair) => {
      if (!uniquePairs.some((pair2) => pair.equals(pair2))) {
        uniquePairs.push(pair);
      }
    });
    return uniquePairs;
  }
  /**
   * Fetches the reserves active bin id for the LBPair
   *
   * @param {Hex} LBPairAddr
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @returns {Promise<LBPairReservesAndId>}
   */
  static async getLBPairReservesAndId(LBPairAddr, isV21, publicClient) {
    if (isV21) {
      const [reserveX2, reserveY2] = await publicClient.readContract({
        abi: LBPairV21ABI,
        address: LBPairAddr,
        functionName: "getReserves"
      });
      const activeId2 = await publicClient.readContract({
        abi: LBPairV21ABI,
        address: LBPairAddr,
        functionName: "getActiveId"
      });
      return {
        reserveX: reserveX2,
        reserveY: reserveY2,
        activeId: activeId2
      };
    }
    const [reserveX, reserveY, activeId] = await publicClient.readContract({
      abi: LBPairABI,
      address: LBPairAddr,
      functionName: "getReservesAndId"
    });
    return {
      reserveX,
      reserveY,
      activeId: Number(activeId)
    };
  }
  /**
   * Fetches the fee parameters for the LBPair
   *
   * @param {Hex} LBPairAddr
   * @param {PublicClient} publicClient
   * @returns {Promise<LBPairFeeParameters>}
   */
  static async getFeeParameters(LBPairAddr, publicClient) {
    return publicClient.readContract({
      abi: LBPairABI,
      address: LBPairAddr,
      functionName: "feeParameters"
    });
  }
  /**
   * Calculate amountX and amountY
   *
   * @param {number[]} binIds
   * @param {number[]} activeBin
   * @param {BinReserves[]} bins
   * @param {bigint[]} totalSupplies
   * @param {string[]} liquidity
   * @returns
   */
  static calculateAmounts(binIds, activeBin, bins, totalSupplies, liquidity) {
    let totalAmountX = JSBI.BigInt(0);
    let totalAmountY = JSBI.BigInt(0);
    binIds.forEach((binId, i) => {
      const { reserveX: _reserveX, reserveY: _reserveY } = bins[i];
      const reserveX = JSBI.BigInt(_reserveX.toString());
      const reserveY = JSBI.BigInt(_reserveY.toString());
      const totalSupply = JSBI.BigInt(totalSupplies[i].toString());
      const liquidityAmount = JSBI.BigInt(liquidity[i]);
      if (binId <= activeBin) {
        const amountY = JSBI.divide(
          JSBI.multiply(liquidityAmount, reserveY),
          totalSupply
        );
        totalAmountY = JSBI.add(amountY, totalAmountY);
      }
      if (binId >= activeBin) {
        const amountX = JSBI.divide(
          JSBI.multiply(liquidityAmount, reserveX),
          totalSupply
        );
        totalAmountX = JSBI.add(amountX, totalAmountX);
      }
    });
    return {
      amountX: totalAmountX,
      amountY: totalAmountY
    };
  }
  /**
   * Returns the amount and distribution args for on-chain addLiquidity() method
   *
   * @param binStep
   * @param token0Amount
   * @param token1Amount
   * @param amountSlippage
   * @param priceSlippage
   * @param liquidityDistribution
   * @returns
   */
  addLiquidityParameters(binStep, token0Amount, token1Amount, amountSlippage, priceSlippage, liquidityDistribution) {
    const token0isX = token0Amount.token.sortsBefore(token1Amount.token);
    const tokenX = token0isX ? token0Amount.token : token1Amount.token;
    const tokenY = token0isX ? token1Amount.token : token0Amount.token;
    const _amountX = token0isX ? token0Amount.raw : token1Amount.raw;
    const _amountY = token0isX ? token1Amount.raw : token0Amount.raw;
    const amountX = _amountX.toString();
    const amountY = _amountY.toString();
    const amountXMin = new Fraction(ONE).add(amountSlippage).invert().multiply(_amountX).quotient.toString();
    const amountYMin = new Fraction(ONE).add(amountSlippage).invert().multiply(_amountY).quotient.toString();
    const _priceSlippage = Number(priceSlippage.toSignificant()) / 100;
    const idSlippage = Bin.getIdSlippageFromPriceSlippage(
      _priceSlippage,
      binStep
    );
    const { deltaIds, distributionX, distributionY } = getLiquidityConfig(
      liquidityDistribution
    );
    return {
      tokenX,
      tokenY,
      amountX,
      amountY,
      amountXMin,
      amountYMin,
      idSlippage,
      deltaIds,
      distributionX,
      distributionY
    };
  }
  /**
   * Calculates amountX, amountY, amountXMin, and amountYMin needed for on-chain removeLiquidity() method
   *
   * @param {number[]} userPositionIds - List of binIds that user has position
   * @param {number} activeBin - The active bin id for the LBPair
   * @param {Bin[]} bins - List of bins whose indices match those of userPositionIds
   * @param {BigNumber[]} totalSupplies - List of bin's total supplies whose indices match those of userPositionIds
   * @param {string[]} amountsToRemove - List of amounts specified by the user to remove in each of their position
   * @param {Percent} amountSlippage - The amounts slippage used to calculate amountXMin and amountYMin
   * @returns
   */
  calculateAmountsToRemove(userPositionIds, activeBin, bins, totalSupplies, amountsToRemove, amountSlippage) {
    const { amountX, amountY } = _PairV2.calculateAmounts(
      userPositionIds,
      activeBin,
      bins,
      totalSupplies,
      amountsToRemove
    );
    const amountXMin = new Fraction(ONE).add(amountSlippage).invert().multiply(amountX).quotient;
    const amountYMin = new Fraction(ONE).add(amountSlippage).invert().multiply(amountY).quotient;
    return {
      amountX,
      amountY,
      amountXMin,
      amountYMin
    };
  }
};

// src/v2entities/route.ts
import { getAddress as getAddress3 } from "viem";
var RouteV2 = class _RouteV2 {
  constructor(pairs, input, output) {
    const path = [input];
    for (const [i, pair] of pairs.entries()) {
      const currentInput = path[i];
      const output2 = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;
      path.push(output2);
    }
    this.pairs = pairs;
    this.path = path;
    this.input = input;
    this.output = output != null ? output : path[path.length - 1];
  }
  /**
   * Returns the list of token addresses for this route
   *
   * @returns {Hex[]}
   */
  pathToStrArr() {
    return this.path.map((token) => getAddress3(token.address));
  }
  /**
   * @static
   * Returns all possible trade routes
   *
   * @param {PairV2[]} pairs - The pairs to consider
   * @param {Token} inputToken - The input token
   * @param {Token} outputToken - The output token
   * @param {number} maxHops - maximum # of hops to allow in the trade route
   * @param {PairV2[]} currentPairs - The current list of pairs forming a route (used in recursion)
   * @param {Token} originalInputToken - The original value of the inputToken param (used in recursion)
   * @param {RouteV2[]} outcome - The current list of routes (used in recursion)
   * @returns {RouteV2[]} An array of constructured routes
   */
  static createAllRoutes(pairs, inputToken, outputToken, maxHops = 3, currentPairs = [], originalInputToken = inputToken, outcome = []) {
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i];
      if (!pair.token0.equals(inputToken) && !pair.token1.equals(inputToken))
        continue;
      const nextToken = pair.token0.equals(inputToken) ? pair.token1 : pair.token0;
      if (nextToken.equals(outputToken)) {
        outcome.push(
          new _RouteV2([...currentPairs, pair], originalInputToken, outputToken)
        );
      } else if (maxHops > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        _RouteV2.createAllRoutes(
          pairsExcludingThisPair,
          nextToken,
          outputToken,
          maxHops - 1,
          [...currentPairs, pair],
          originalInputToken,
          outcome
        );
      }
    }
    return outcome;
  }
};

// src/v2entities/trade.ts
import {
  TokenAmount as TokenAmount2,
  Percent as Percent2,
  Fraction as Fraction2,
  CurrencyAmount,
  TradeType,
  WNATIVE,
  ONE as ONE2,
  ZERO,
  Price
} from "@traderjoe-xyz/sdk-core";
import JSBI2 from "jsbi";
import invariant2 from "tiny-invariant";
import { encodeFunctionData } from "viem";
var TradeV2 = class _TradeV2 {
  constructor(route, tokenIn, tokenOut, quote, isExactIn, isNativeIn, isNativeOut) {
    const inputAmount = new TokenAmount2(
      tokenIn,
      JSBI2.BigInt(quote.amounts[0].toString())
    );
    const outputAmount = new TokenAmount2(
      tokenOut,
      JSBI2.BigInt(quote.amounts[quote.amounts.length - 1].toString())
    );
    this.route = route;
    this.tradeType = isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT;
    this.quote = quote;
    this.isNativeIn = isNativeIn;
    this.isNativeOut = isNativeOut;
    this.inputAmount = inputAmount;
    this.outputAmount = outputAmount;
    this.executionPrice = new Price(
      this.inputAmount.currency,
      this.outputAmount.currency,
      this.inputAmount.raw,
      this.outputAmount.raw
    );
    if (isExactIn) {
      const exactQuoteStr = quote.virtualAmountsWithoutSlippage[quote.virtualAmountsWithoutSlippage.length - 1].toString();
      this.exactQuote = new TokenAmount2(tokenOut, JSBI2.BigInt(exactQuoteStr));
      const slippage = this.exactQuote.subtract(outputAmount).divide(this.exactQuote);
      this.priceImpact = new Percent2(slippage.numerator, slippage.denominator);
    } else {
      const exactQuoteStr = quote.virtualAmountsWithoutSlippage[0].toString();
      this.exactQuote = new TokenAmount2(tokenIn, JSBI2.BigInt(exactQuoteStr));
      const slippage = inputAmount.subtract(this.exactQuote).divide(inputAmount);
      this.priceImpact = new Percent2(slippage.numerator, slippage.denominator);
    }
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   *
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   * @returns {CurrencyAmount}
   */
  minimumAmountOut(slippageTolerance) {
    invariant2(!slippageTolerance.lessThan(ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === TradeType.EXACT_OUTPUT) {
      return this.outputAmount;
    } else {
      const slippageAdjustedAmountOut = new Fraction2(ONE2).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      const chainId = this.outputAmount.token.chainId;
      return this.outputAmount instanceof TokenAmount2 ? new TokenAmount2(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(chainId, slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   *
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   * @returns {CurrencyAmount}
   */
  maximumAmountIn(slippageTolerance) {
    invariant2(!slippageTolerance.lessThan(ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === TradeType.EXACT_INPUT) {
      return this.inputAmount;
    } else {
      const slippageAdjustedAmountIn = new Fraction2(ONE2).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      const chainId = this.outputAmount.token.chainId;
      return this.inputAmount instanceof TokenAmount2 ? new TokenAmount2(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(chainId, slippageAdjustedAmountIn);
    }
  }
  /**
   * Returns the on-chain method name and args for this trade
   *
   * @param {TradeOptions | TradeOptionsDeadline} options
   * @returns {SwapParameters}
   */
  swapCallParameters(options) {
    const nativeIn = this.isNativeIn;
    const nativeOut = this.isNativeOut;
    invariant2(!(nativeIn && nativeOut), "AVAX_IN_OUT");
    invariant2(!("ttl" in options) || options.ttl > 0, "TTL");
    const to = validateAndParseAddress(options.recipient);
    const amountIn = toHex(
      this.maximumAmountIn(options.allowedSlippage)
    );
    const amountOut = toHex(
      this.minimumAmountOut(options.allowedSlippage)
    );
    const binSteps = this.quote.binSteps.map(
      (bin) => "0x" + bin.toString(16)
    );
    const path = {
      pairBinSteps: binSteps,
      versions: this.quote.versions,
      tokenPath: this.quote.route
    };
    const deadline = "ttl" in options ? `0x${(Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3) + options.ttl).toString(
      16
    )}` : `0x${options.deadline.toString(16)}`;
    const useFeeOnTransfer = Boolean(options.feeOnTransfer);
    let methodName;
    let args;
    let value;
    switch (this.tradeType) {
      case TradeType.EXACT_INPUT:
        if (nativeIn) {
          methodName = useFeeOnTransfer ? "swapExactNATIVEForTokensSupportingFeeOnTransferTokens" : "swapExactNATIVEForTokens";
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (nativeOut) {
          methodName = useFeeOnTransfer ? "swapExactTokensForNATIVESupportingFeeOnTransferTokens" : "swapExactTokensForNATIVE";
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = useFeeOnTransfer ? "swapExactTokensForTokensSupportingFeeOnTransferTokens" : "swapExactTokensForTokens";
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
      case TradeType.EXACT_OUTPUT:
        invariant2(!useFeeOnTransfer, "EXACT_OUT_FOT");
        if (nativeIn) {
          methodName = "swapNATIVEForExactTokens";
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (nativeOut) {
          methodName = "swapTokensForExactNATIVE";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = "swapTokensForExactTokens";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
    }
    return {
      methodName,
      args,
      value
    };
  }
  /**
   * Calculates trade fee in terms of inputToken
   *
   * @returns {TradeFee}
   */
  async getTradeFee() {
    const amounts = this.quote.amounts;
    const feesPct = this.quote.fees.map(
      (bn) => new Percent2(JSBI2.BigInt(bn.toString()), JSBI2.BigInt(1e18))
    );
    const fees = feesPct.map((pct, i) => {
      const amount = amounts[i].toString();
      return pct.multiply(JSBI2.BigInt(amount)).quotient;
    });
    const feesTokenIn = fees.map((fee, i) => {
      if (i === 0) {
        return fee;
      }
      const midPrice = new Fraction2(
        JSBI2.BigInt(amounts[0].toString()),
        JSBI2.BigInt(amounts[i].toString())
      );
      return midPrice.multiply(fee).quotient;
    });
    const totalFee = feesTokenIn.reduce(
      (a, b) => JSBI2.add(a, b),
      JSBI2.BigInt("0")
    );
    const feeAmountIn = new TokenAmount2(this.inputAmount.token, totalFee);
    const totalFeePct = new Percent2(totalFee, JSBI2.BigInt(this.inputAmount.raw));
    return {
      totalFeePct,
      feeAmountIn
    };
  }
  /**
   * Returns an estimate of the gas cost for the trade
   *
   * @param {PublicClient} publicClient - The public client
   * @param {ChainId} chainId - The network chain id
   * @param {Percent} slippageTolerance - The slippage tolerance
   * @returns {Promise<BigNumber>}
   */
  async estimateGas(publicClient, account, chainId, slippageTolerance) {
    const currentBlockTimestamp = (await publicClient.getBlock({ blockTag: "latest" })).timestamp;
    const options = {
      allowedSlippage: slippageTolerance,
      recipient: account,
      deadline: Number(currentBlockTimestamp) + 120
    };
    const { methodName, args, value } = this.swapCallParameters(options);
    const gasEstimate = await publicClient.estimateGas({
      blockTag: "latest",
      account,
      to: LB_ROUTER_V21_ADDRESS[chainId],
      data: encodeFunctionData({
        abi: LBRouterV21ABI,
        functionName: methodName,
        args
      }),
      value: value && !isZero(value) ? BigInt(value) : void 0
    });
    return gasEstimate;
  }
  /**
   * @static
   * Returns the list of trades, given a list of routes and a fixed amount of the input token
   *
   * @param {RouteV2[]} routes
   * @param {TokenAmount} tokenAmountIn
   * @param {Token} tokenOut
   * @param {boolean} isNativeIn
   * @param {boolean} isNativeOut
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {TradeV2[]}
   */
  static async getTradesExactIn(routes, tokenAmountIn, tokenOut, isNativeIn, isNativeOut, publicClient, chainId) {
    const isExactIn = true;
    const isWrapSwap = isNativeIn && tokenOut.address === WNATIVE[chainId].address || isNativeOut && tokenAmountIn.token.address === WNATIVE[chainId].address;
    if (isWrapSwap) {
      return [];
    }
    const amountIn = BigInt(tokenAmountIn.raw.toString());
    try {
      const calls = routes.map((route) => {
        return {
          abi: LBQuoterV21ABI,
          address: LB_QUOTER_V21_ADDRESS[chainId],
          functionName: "findBestPathFromAmountIn",
          args: [route.pathToStrArr(), amountIn]
        };
      });
      const reads = await publicClient.multicall({
        contracts: calls,
        allowFailure: true
      });
      const trades = reads.map((read, i) => {
        if (read.status !== "success")
          return void 0;
        return new _TradeV2(
          routes[i],
          tokenAmountIn.token,
          tokenOut,
          read.result,
          isExactIn,
          isNativeIn,
          isNativeOut
        );
      });
      return trades.filter(
        (trade) => !!trade && JSBI2.greaterThan(trade.outputAmount.raw, JSBI2.BigInt(0))
      );
    } catch (e) {
      console.debug("Error fetching quotes:", e);
      return [];
    }
  }
  /**
   * @static
   * Returns the list of trades, given a list of routes and a fixed amount of the output token
   *
   * @param {RouteV2[]} routes
   * @param {TokenAmount} tokenAmountOut
   * @param {Token} tokenIn
   * @param {boolean} isNativeIn
   * @param {boolean} isNativeOut
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {TradeV2[]}
   */
  static async getTradesExactOut(routes, tokenAmountOut, tokenIn, isNativeIn, isNativeOut, publicClient, chainId) {
    const isExactIn = false;
    const isWrapSwap = isNativeIn && tokenAmountOut.token.address === WNATIVE[chainId].address || isNativeOut && tokenIn.address === WNATIVE[chainId].address;
    if (isWrapSwap) {
      return [];
    }
    const amountOut = BigInt(tokenAmountOut.raw.toString());
    try {
      const calls = routes.map((route) => {
        return {
          abi: LBQuoterV21ABI,
          address: LB_QUOTER_V21_ADDRESS[chainId],
          functionName: "findBestPathFromAmountOut",
          args: [route.pathToStrArr(), amountOut]
        };
      });
      const reads = await publicClient.multicall({
        contracts: calls,
        allowFailure: true
      });
      const trades = reads.map((read, i) => {
        if (read.status !== "success")
          return void 0;
        return new _TradeV2(
          routes[i],
          tokenIn,
          tokenAmountOut.token,
          read.result,
          isExactIn,
          isNativeIn,
          isNativeOut
        );
      });
      return trades.filter(
        (trade) => !!trade && JSBI2.greaterThan(trade.inputAmount.raw, JSBI2.BigInt(0))
      );
    } catch (e) {
      console.debug("Error fetching quotes:", e);
      return [];
    }
  }
  /**
   * @static
   * Returns the best trade
   *
   * @param {TradeV2[]} trades
   * @param {boolean} isExactIn
   * @returns {TradeV2}
   */
  static chooseBestTrade(trades, isExactIn) {
    if (trades.length === 0) {
      return void 0;
    }
    let bestTrade = trades[0];
    trades.forEach((trade) => {
      if (isExactIn) {
        if (JSBI2.greaterThan(trade.outputAmount.raw, bestTrade.outputAmount.raw)) {
          bestTrade = trade;
        }
      } else {
        if (JSBI2.greaterThan(trade.inputAmount.raw, JSBI2.BigInt(0)) && JSBI2.lessThan(trade.inputAmount.raw, bestTrade.inputAmount.raw)) {
          bestTrade = trade;
        }
      }
    });
    return bestTrade;
  }
  /**
   * Selects the best trade given trades and gas
   *
   * @param {TradeV2[]} trades
   * @param {bigint[]} estimatedGas
   * @returns {bestTrade: TradeV2, estimatedGas: bigint}
   */
  static chooseBestTradeWithGas(trades, estimatedGas) {
    const tradeType = trades[0].tradeType;
    const tradeValueAVAX = BigInt(0);
    const tradesWithGas = trades.map((trade, index) => {
      return {
        trade,
        estimatedGas: estimatedGas[index],
        swapOutcome: trade.tradeType === TradeType.EXACT_INPUT ? new Fraction2(
          trade.outputAmount.numerator,
          trade.outputAmount.denominator
        ).subtract(
          tradeValueAVAX === BigInt(0) ? BigInt(0) : (
            // Cross product to get the gas price against the output token
            trade.outputAmount.multiply(estimatedGas[index].toString()).divide(tradeValueAVAX)
          )
        ) : new Fraction2(
          trade.inputAmount.numerator,
          trade.inputAmount.denominator
        ).add(
          tradeValueAVAX === BigInt(0) ? BigInt(0) : trade.inputAmount.multiply(estimatedGas[index].toString()).divide(tradeValueAVAX)
        )
      };
    });
    const bestTrade = tradesWithGas.reduce(
      (previousTrade, currentTrade) => tradeType === TradeType.EXACT_INPUT ? currentTrade.swapOutcome.greaterThan(previousTrade.swapOutcome) ? currentTrade : previousTrade : currentTrade.trade.inputAmount.greaterThan("0") && currentTrade.swapOutcome.lessThan(previousTrade.swapOutcome) ? currentTrade : previousTrade
    );
    return { bestTrade: bestTrade.trade, estimatedGas: bestTrade.estimatedGas };
  }
  /**
   * Returns an object representing this trade for a readable cosole.log
   *
   * @returns {Object}
   */
  toLog() {
    return {
      route: {
        path: this.route.path.map((token) => `${token.name}(${token.address})`).join(", ")
      },
      tradeType: this.tradeType === TradeType.EXACT_INPUT ? "EXACT_INPUT" : "EXACT_OUTPUT",
      inputAmount: `${this.inputAmount.toSignificant(6)} ${this.inputAmount.currency.symbol}`,
      outputAmount: `${this.outputAmount.toSignificant(6)} ${this.outputAmount.currency.symbol}`,
      executionPrice: `${this.executionPrice.toSignificant(6)} ${this.outputAmount.currency.symbol} / ${this.inputAmount.currency.symbol}`,
      exactQuote: `${this.exactQuote.toSignificant(6)} ${this.exactQuote.currency.symbol}`,
      priceImpact: `${this.priceImpact.toSignificant(6)}%`,
      quote: {
        route: this.quote.route.join(", "),
        pairs: this.quote.pairs.join(", "),
        binSteps: this.quote.binSteps.map((el) => el.toString()).join(", "),
        versions: this.quote.versions.join(", "),
        amounts: this.quote.amounts.map((el) => el.toString()).join(", "),
        fees: this.quote.fees.map((el) => el.toString()).join(", "),
        virtualAmountsWithoutSlippage: this.quote.virtualAmountsWithoutSlippage.map((el) => el.toString()).join(", ")
      }
    };
  }
};

// src/types/trade.ts
var PoolVersion = /* @__PURE__ */ ((PoolVersion2) => {
  PoolVersion2[PoolVersion2["V1"] = 0] = "V1";
  PoolVersion2[PoolVersion2["V2"] = 1] = "V2";
  PoolVersion2[PoolVersion2["V2_1"] = 2] = "V2_1";
  return PoolVersion2;
})(PoolVersion || {});
export {
  APTFarmABI,
  APTFarmLensABI,
  APT_FARM_LENS,
  Bin,
  DEXCANDLES_SUBGRAPH_V2,
  DEXLENS_ADDRESS,
  DEX_V2_SUBGRAPH,
  DexLensABI,
  JSBI3 as JSBI,
  LBFactoryABI,
  LBFactoryV21ABI,
  LBPairABI,
  LBPairV21ABI,
  LBQuoterABI,
  LBQuoterV21ABI,
  LBRewarderABI,
  LBRouterABI,
  LBRouterV21ABI,
  LB_FACTORY_ADDRESS,
  LB_FACTORY_V21_ADDRESS,
  LB_QUOTER_ADDRESS,
  LB_QUOTER_V21_ADDRESS,
  LB_REWARDER_ADDRESS,
  LB_ROUTER_ADDRESS,
  LB_ROUTER_V21_ADDRESS,
  LIMIT_ORDER_MANAGER_ADDRESS,
  LIQUIDITY_AMOUNTS_HELPER_ADDRESS,
  LimitOrderManagerABI,
  LiquidityAmountsHelperABI,
  LiquidityDistribution,
  PairV2,
  PoolVersion,
  RouteV2,
  TradeV2,
  VAULT_FACTORY_ADDRESS,
  VaultABI,
  VaultFactoryABI,
  getBidAskDistributionFromBinRange,
  getCurveDistributionFromBinRange,
  getDistributionFromTargetBin,
  getLiquidityConfig,
  getUniformDistributionFromBinRange,
  isZero,
  json_exports as jsonAbis,
  normalizeDist,
  toHex,
  validateAndParseAddress
};
