"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BAR_ADDRESS: () => BAR_ADDRESS,
  BAR_SUBGRAPH: () => BAR_SUBGRAPH,
  BOOSTED_MASTERCHEF_ADDRESS: () => BOOSTED_MASTERCHEF_ADDRESS,
  BOOSTED_MASTERCHEF_SUBGRAPH: () => BOOSTED_MASTERCHEF_SUBGRAPH,
  BORINGDASHBOARD_ADDRESS: () => BORINGDASHBOARD_ADDRESS,
  BORINGHELPER_ADDRESS: () => BORINGHELPER_ADDRESS,
  BORINGHELPER_BMCJ_ADDRESS: () => BORINGHELPER_BMCJ_ADDRESS,
  BORINGHELPER_MCV3_ADDRESS: () => BORINGHELPER_MCV3_ADDRESS,
  BORINGTOKENSCANNER_ADDRESS: () => BORINGTOKENSCANNER_ADDRESS,
  DEXCANDLES_SUBGRAPH: () => DEXCANDLES_SUBGRAPH,
  ERC20ABI: () => ERC20ABI,
  EXCHANGE_SUBGRAPH: () => EXCHANGE_SUBGRAPH,
  FACTORY_ADDRESS: () => FACTORY_ADDRESS,
  FARMLENSV2_ADDRESS: () => FARMLENSV2_ADDRESS,
  FARMLENS_ADDRESS: () => FARMLENS_ADDRESS,
  FEE_COLLECTOR_SUBGRAPH: () => FEE_COLLECTOR_SUBGRAPH,
  Fetcher: () => Fetcher,
  INIT_CODE_HASH: () => INIT_CODE_HASH,
  InsufficientInputAmountError: () => InsufficientInputAmountError,
  InsufficientReservesError: () => InsufficientReservesError,
  JAVAX_ADDRESS: () => JAVAX_ADDRESS,
  JOELENS_ADDRESS: () => JOELENS_ADDRESS,
  JOEPEG_MARKETPLACE_SUBGRAPH: () => JOEPEG_MARKETPLACE_SUBGRAPH,
  JOE_ADDRESS: () => JOE_ADDRESS,
  JSBI: () => import_jsbi2.default,
  JoePairABI: () => JoePairABI,
  LAUNCH_EVENT_LENS_ADDRESS: () => LAUNCH_EVENT_LENS_ADDRESS,
  LENDING_SUBGRAPH: () => LENDING_SUBGRAPH,
  LOCKING_WRAPPER_ADDRESS: () => LOCKING_WRAPPER_ADDRESS,
  MAKER_ADDRESS: () => MAKER_ADDRESS,
  MASTERCHEF_ADDRESS: () => MASTERCHEF_ADDRESS,
  MASTERCHEF_SUBGRAPH: () => MASTERCHEF_SUBGRAPH,
  MASTERCHEF_V3_ADDRESS: () => MASTERCHEF_V3_ADDRESS,
  MAXIMILLION_ADDRESS: () => MAXIMILLION_ADDRESS,
  MONEY_MAKER_ADDRESS: () => MONEY_MAKER_ADDRESS,
  MONEY_MAKER_SUBGRAPH: () => MONEY_MAKER_SUBGRAPH,
  NFT_CONTRACTS_SUBGRAPH: () => NFT_CONTRACTS_SUBGRAPH,
  Pair: () => Pair,
  ROCKET_JOE_STAKING_ADDRESS: () => ROCKET_JOE_STAKING_ADDRESS,
  ROCKET_JOE_TOKEN_ADDRESS: () => ROCKET_JOE_TOKEN_ADDRESS,
  ROCKET_SUBGRAPH: () => ROCKET_SUBGRAPH,
  ROLL_ADDRESS: () => ROLL_ADDRESS,
  ROUTER_ADDRESS: () => ROUTER_ADDRESS,
  RocketJoeStakingABI: () => RocketJoeStakingABI,
  Route: () => Route,
  Router: () => Router,
  RouterABI: () => RouterABI,
  SJOE_REWARD_TOKEN: () => SJOE_REWARD_TOKEN,
  SJOE_SUBGRAPH: () => SJOE_SUBGRAPH,
  STABLE_JOE_STAKING_ADDRESS: () => STABLE_JOE_STAKING_ADDRESS,
  StableJoeStakingABI: () => StableJoeStakingABI,
  Trade: () => Trade,
  UNITROLLER_ADDRESS: () => UNITROLLER_ADDRESS,
  VEJOE_STAKING_ADDRESS: () => VEJOE_STAKING_ADDRESS,
  VEJOE_SUBGRAPH: () => VEJOE_SUBGRAPH,
  VEJOE_TOKEN_ADDRESS: () => VEJOE_TOKEN_ADDRESS,
  VeJoeABI: () => VeJoeABI,
  VeJoeStakingABI: () => VeJoeStakingABI,
  WNativeABI: () => WNativeABI,
  XJoeStakingABI: () => XJoeStakingABI,
  ZAP_ADDRESS: () => ZAP_ADDRESS,
  inputOutputComparator: () => inputOutputComparator,
  tradeComparator: () => tradeComparator
});
module.exports = __toCommonJS(src_exports);
var import_jsbi2 = __toESM(require("jsbi"));

// src/constants.ts
var import_sdk_core = require("@traderjoe-xyz/sdk-core");
var FACTORY_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xF5c7d9733e5f53abCC1695820c4818C59B457C2C",
  [import_sdk_core.ChainId.AVALANCHE]: "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0xaE4EC9901c3076D0DdBe76A520F9E90a6227aCB7",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x1886D09C9Ade0c5DB822D85D21678Db67B6c2982",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x4f8bdc85E3eec5b9dE67097c3f59B6Db025d9986",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x4f953EFDbcE2B8CAe76e5b4779A682d9ab0c941c",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var ROUTER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xd7f655E3376cE2D7A2b08fF01Eb3B1023191A901",
  [import_sdk_core.ChainId.AVALANCHE]: "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0xbeE5c10Cf6E4F68f831E11C1D9E59B43560B3642",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x454206AD825cAfaE03c9581014AF6b74f7D53713",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x89Fa1974120d2a7F83a0cb80df3654721c6a38Cd",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0007963AE06b1771Ee5E979835D82d63504Cf11d",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var JOE_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x477Fd10Db0D80eAFb773cF623B258313C3739413",
  [import_sdk_core.ChainId.AVALANCHE]: "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x371c7ec6D8039ff7933a2AA28EB827Ffe1F52f07",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x371c7ec6D8039ff7933a2AA28EB827Ffe1F52f07",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var MASTERCHEF_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xEAA9637E54D4Da88d7A56E797C2EAa4950111033",
  [import_sdk_core.ChainId.AVALANCHE]: "0xd6a4F121CA35509aF06A0Be99093d08462f53052",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var MASTERCHEF_V3_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x47e4B09651D76609e902183c2315b0638fa8375E",
  [import_sdk_core.ChainId.AVALANCHE]: "0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BAR_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x200BdB3Ed6bF347421329FdbF1813dE87F1A456a",
  [import_sdk_core.ChainId.AVALANCHE]: "0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var ZAP_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x035CA9dB0e001808cB8CD20D1d1C592dF1250107",
  [import_sdk_core.ChainId.AVALANCHE]: "0x2C7B8e971c704371772eDaf16e0dB381A8D02027",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var MAKER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x6De03a4221d325Edc9707CEdeff9C150e99d6eC5",
  [import_sdk_core.ChainId.AVALANCHE]: "0x861726BFE27931A4E22a7277bDe6cb8432b65856",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var ROLL_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x41d5f5F66e4cEd197Ff273308A1c194E9E249f4F",
  [import_sdk_core.ChainId.AVALANCHE]: "0xacFF0fBf56bAeb9Ef677DE19ADED8F7A950BCb58",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BORINGHELPER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x832452DBa66232193C0fb525D5165a3A58b6811B",
  [import_sdk_core.ChainId.AVALANCHE]: "0x1dd4D86180EEe39ac4fB35ECa67CACF608Ab5741",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BORINGHELPER_MCV3_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x87631c1Ec5312e030D4874231d8e0AFc545928A2",
  [import_sdk_core.ChainId.AVALANCHE]: "0xce63ECA0C8A2084C1BaEcE7737dB88f10c412c5E",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BORINGHELPER_BMCJ_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x9B427cBE6cee480773Fb889ec7067B8b1541dA7f",
  [import_sdk_core.ChainId.AVALANCHE]: "0x80242b13F37eEB5B59fFe0e988d69133f1b19747",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BORINGTOKENSCANNER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xD28be693a573a26f50195213613EC893Ad5c4460",
  [import_sdk_core.ChainId.AVALANCHE]: "0x5cFcA5b2149A20A166508B28e5FCFA65c44c6B9c",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BORINGDASHBOARD_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xD28be693a573a26f50195213613EC893Ad5c4460",
  [import_sdk_core.ChainId.AVALANCHE]: "0x1Af353148F2316487b5311Fcd522c037842D232c",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LOCKING_WRAPPER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.AVALANCHE]: "0xDc3B37B5F0Fe5d3f8b8701a3F8d81A02EE8A1E1a",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var FARMLENS_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.AVALANCHE]: "0x8A6FA314799b5E5553Cbce7fab3d9EAdEf5ee85a",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var FARMLENSV2_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x6B41A932D2A9f00476229733980D80EE11Dd1617",
  [import_sdk_core.ChainId.AVALANCHE]: "0xF16d25Eba0D8E51cEAF480141bAf577aE55bfdd2",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var ROCKET_JOE_TOKEN_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x2Dc95E863BE58a6EFfe9b5B5D8275537e83bfbE4",
  [import_sdk_core.ChainId.AVALANCHE]: "0x5483ce08659fABF0277f9314868Cc4f78687BD08",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var LAUNCH_EVENT_LENS_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xBeC83e09C4e461de91fD0F65AFbEd17046F3D9DD",
  [import_sdk_core.ChainId.AVALANCHE]: "0x039AA5d3FC07f6f265656793A8c437055b653d68",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var ROCKET_JOE_STAKING_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x1a1171b5faa9954A68F3679EF91E4dACd6D2c247",
  [import_sdk_core.ChainId.AVALANCHE]: "0x102D195C3eE8BF8A9A89d63FB3659432d3174d81",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var STABLE_JOE_STAKING_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x5Fd0A10CA299a02429418EAAcC7286482a5f075D",
  [import_sdk_core.ChainId.AVALANCHE]: "0x1a731B2299E22FbAC282E7094EdA41046343Cb51",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x43646A8e839B2f2766392C1BF8f60F6e587B6960",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var MONEY_MAKER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x6De03a4221d325Edc9707CEdeff9C150e99d6eC5",
  [import_sdk_core.ChainId.AVALANCHE]: "0x63C0CF90aE12190B388F9914531369aC1e4e4e47",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var SJOE_REWARD_TOKEN = {
  [import_sdk_core.ChainId.FUJI]: "0x950c6f4f97dd62bd3ca76f084663224fd2e6b555",
  [import_sdk_core.ChainId.AVALANCHE]: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var VEJOE_STAKING_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x63064873AC2e94bbe82479265BD252417b34C462",
  [import_sdk_core.ChainId.AVALANCHE]: "0x25D85E17dD9e544F6E9F8D44F99602dbF5a97341",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var VEJOE_TOKEN_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x8043E85a15c7F4Ad58a24712Cf08C624B52fAa34",
  [import_sdk_core.ChainId.AVALANCHE]: "0x3cabf341943Bc8466245e4d6F1ae0f8D071a1456",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var BOOSTED_MASTERCHEF_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xEE7B7871755bCe3CD1B0aa1d01320Dd311b08279",
  [import_sdk_core.ChainId.AVALANCHE]: "0x4483f0b6e2F5486D06958C20f8C39A7aBe87bf8F",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var INIT_CODE_HASH = {
  [import_sdk_core.ChainId.FUJI]: "0x6c67ac67d0dad54be7b066edd9b4154fb5a0ab7d01232259b9ff26ebc1739ba2",
  [import_sdk_core.ChainId.AVALANCHE]: "0x0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x5c9d12e487d245c53fb0b8dd1ba2ccc48810e6b9671311502b8632e88b0d605b",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0xb6ca21329f2e28f35a5fc6848619516b62c84c068b584d1497decf19662bb190",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x75e986a1d8c57bd5530b4b59ab7dd63c4d4ad267f147e17774264956de33c282",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x75e986a1d8c57bd5530b4b59ab7dd63c4d4ad267f147e17774264956de33c282",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var UNITROLLER_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xf817f74bb514cb0AF7d3b56299c33C33895630f2",
  [import_sdk_core.ChainId.AVALANCHE]: "0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var JOELENS_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x3A2C79d45EEdcE68d3993F807336D4b0b41741b0",
  [import_sdk_core.ChainId.AVALANCHE]: "0x994Ed0698F5145211Fd5DAE458dD7d91c2da6CEC",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var JAVAX_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0xE2b2CF0Cc751223C4F2Dc9EF1Cd8d2F27f92a84a",
  [import_sdk_core.ChainId.AVALANCHE]: "0xC22F01ddc8010Ee05574028528614634684EC29e",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};
var MAXIMILLION_ADDRESS = {
  [import_sdk_core.ChainId.FUJI]: "0x7b647D11b2E9354fA570B8613BD361AE51e51c27",
  [import_sdk_core.ChainId.AVALANCHE]: "0xe5cDdAFd0f7Af3DEAf4bd213bBaee7A5927AB7E7",
  [import_sdk_core.ChainId.ARBITRUM_ONE]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ARB_GOERLI]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_CHAIN]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.BNB_TESTNET]: "0x0000000000000000000000000000000000000000",
  [import_sdk_core.ChainId.ETHEREUM]: "0x0000000000000000000000000000000000000000"
};

// src/errors.ts
var CAN_SET_PROTOTYPE = "setPrototypeOf" in Object;
var InsufficientReservesError = class extends Error {
  constructor() {
    super();
    this.isInsufficientReservesError = true;
    this.name = this.constructor.name;
    if (CAN_SET_PROTOTYPE)
      Object.setPrototypeOf(this, new.target.prototype);
  }
};
var InsufficientInputAmountError = class extends Error {
  constructor() {
    super();
    this.isInsufficientInputAmountError = true;
    this.name = this.constructor.name;
    if (CAN_SET_PROTOTYPE)
      Object.setPrototypeOf(this, new.target.prototype);
  }
};

// src/entities/price.ts
var import_sdk_core2 = require("@traderjoe-xyz/sdk-core");
var Price = class _Price extends import_sdk_core2.Price {
  static fromRoute(route) {
    const prices = [];
    for (const [i, pair] of route.pairs.entries()) {
      prices.push(
        route.path[i].equals(pair.token0) ? new _Price(
          pair.reserve0.currency,
          pair.reserve1.currency,
          pair.reserve0.raw,
          pair.reserve1.raw
        ) : new _Price(
          pair.reserve1.currency,
          pair.reserve0.currency,
          pair.reserve1.raw,
          pair.reserve0.raw
        )
      );
    }
    return prices.slice(1).reduce(
      (accumulator, currentValue) => accumulator.multiply(currentValue),
      prices[0]
    );
  }
};

// src/entities/pair.ts
var import_sdk_core3 = require("@traderjoe-xyz/sdk-core");
var import_tiny_invariant = __toESM(require("tiny-invariant"));
var import_jsbi = __toESM(require("jsbi"));
var import_viem = require("viem");
var PAIR_ADDRESS_CACHE = {};
var Pair = class _Pair {
  static getAddress(tokenA, tokenB, chainId) {
    var _a;
    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];
    if (((_a = PAIR_ADDRESS_CACHE == null ? void 0 : PAIR_ADDRESS_CACHE[tokens[0].address]) == null ? void 0 : _a[tokens[1].address]) === void 0) {
      const from = (0, import_viem.toBytes)((0, import_viem.getAddress)(FACTORY_ADDRESS[chainId]));
      const salt = (0, import_viem.pad)(
        (0, import_viem.keccak256)(
          (0, import_viem.encodePacked)(
            ["address", "address"],
            [(0, import_viem.getAddress)(tokens[0].address), (0, import_viem.getAddress)(tokens[1].address)]
          ),
          "bytes"
        ),
        {
          size: 32
        }
      );
      const bytecodeHash = (0, import_viem.toBytes)(INIT_CODE_HASH[chainId]);
      PAIR_ADDRESS_CACHE = {
        ...PAIR_ADDRESS_CACHE,
        [tokens[0].address]: {
          ...PAIR_ADDRESS_CACHE == null ? void 0 : PAIR_ADDRESS_CACHE[tokens[0].address],
          [tokens[1].address]: (0, import_viem.getAddress)(
            (0, import_viem.slice)(
              (0, import_viem.keccak256)((0, import_viem.concat)([(0, import_viem.toBytes)("0xff"), from, salt, bytecodeHash])),
              12
            )
          )
        }
      };
    }
    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];
  }
  constructor(tokenAmountA, tokenAmountB, chainId) {
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    this.liquidityToken = new import_sdk_core3.Token(
      tokenAmounts[0].token.chainId,
      _Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, chainId),
      18,
      "JLP",
      "Joe Liquidity"
    );
    this.tokenAmounts = tokenAmounts;
  }
  /**
   * Returns true if the token is either token0 or token1
   * @param token to check
   */
  involvesToken(token) {
    return token.equals(this.token0) || token.equals(this.token1);
  }
  /**
   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0
   */
  get token0Price() {
    return new Price(
      this.token0,
      this.token1,
      this.tokenAmounts[0].raw,
      this.tokenAmounts[1].raw
    );
  }
  /**
   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1
   */
  get token1Price() {
    return new Price(
      this.token1,
      this.token0,
      this.tokenAmounts[1].raw,
      this.tokenAmounts[0].raw
    );
  }
  /**
   * Return the price of the given token in terms of the other token in the pair.
   * @param token token to return price of
   */
  priceOf(token) {
    (0, import_tiny_invariant.default)(this.involvesToken(token), "TOKEN");
    return token.equals(this.token0) ? this.token0Price : this.token1Price;
  }
  /**
   * Returns the chain ID of the tokens in the pair.
   */
  get chainId() {
    return this.token0.chainId;
  }
  get token0() {
    return this.tokenAmounts[0].token;
  }
  get token1() {
    return this.tokenAmounts[1].token;
  }
  get reserve0() {
    return this.tokenAmounts[0];
  }
  get reserve1() {
    return this.tokenAmounts[1];
  }
  reserveOf(token) {
    (0, import_tiny_invariant.default)(this.involvesToken(token), "TOKEN");
    return token.equals(this.token0) ? this.reserve0 : this.reserve1;
  }
  getOutputAmount(inputAmount, chainId) {
    (0, import_tiny_invariant.default)(this.involvesToken(inputAmount.token), "TOKEN");
    if (import_jsbi.default.equal(this.reserve0.raw, import_sdk_core3.ZERO) || import_jsbi.default.equal(this.reserve1.raw, import_sdk_core3.ZERO)) {
      throw new InsufficientReservesError();
    }
    const inputReserve = this.reserveOf(inputAmount.token);
    const outputReserve = this.reserveOf(
      inputAmount.token.equals(this.token0) ? this.token1 : this.token0
    );
    const inputAmountWithFee = import_jsbi.default.multiply(inputAmount.raw, import_sdk_core3._997);
    const numerator = import_jsbi.default.multiply(inputAmountWithFee, outputReserve.raw);
    const denominator = import_jsbi.default.add(
      import_jsbi.default.multiply(inputReserve.raw, import_sdk_core3._1000),
      inputAmountWithFee
    );
    const outputAmount = new import_sdk_core3.TokenAmount(
      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      import_jsbi.default.divide(numerator, denominator)
    );
    if (import_jsbi.default.equal(outputAmount.raw, import_sdk_core3.ZERO)) {
      throw new InsufficientInputAmountError();
    }
    return [
      outputAmount,
      new _Pair(
        inputReserve.add(inputAmount),
        outputReserve.subtract(outputAmount),
        chainId
      )
    ];
  }
  getInputAmount(outputAmount, chainId) {
    (0, import_tiny_invariant.default)(this.involvesToken(outputAmount.token), "TOKEN");
    if (import_jsbi.default.equal(this.reserve0.raw, import_sdk_core3.ZERO) || import_jsbi.default.equal(this.reserve1.raw, import_sdk_core3.ZERO) || import_jsbi.default.greaterThanOrEqual(
      outputAmount.raw,
      this.reserveOf(outputAmount.token).raw
    )) {
      throw new InsufficientReservesError();
    }
    const outputReserve = this.reserveOf(outputAmount.token);
    const inputReserve = this.reserveOf(
      outputAmount.token.equals(this.token0) ? this.token1 : this.token0
    );
    const numerator = import_jsbi.default.multiply(
      import_jsbi.default.multiply(inputReserve.raw, outputAmount.raw),
      import_sdk_core3._1000
    );
    const denominator = import_jsbi.default.multiply(
      import_jsbi.default.subtract(outputReserve.raw, outputAmount.raw),
      import_sdk_core3._997
    );
    const inputAmount = new import_sdk_core3.TokenAmount(
      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,
      import_jsbi.default.add(import_jsbi.default.divide(numerator, denominator), import_sdk_core3.ONE)
    );
    return [
      inputAmount,
      new _Pair(
        inputReserve.add(inputAmount),
        outputReserve.subtract(outputAmount),
        chainId
      )
    ];
  }
  getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {
    (0, import_tiny_invariant.default)(totalSupply.token.equals(this.liquidityToken), "LIQUIDITY");
    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];
    (0, import_tiny_invariant.default)(
      tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1),
      "TOKEN"
    );
    let liquidity;
    if (import_jsbi.default.equal(totalSupply.raw, import_sdk_core3.ZERO)) {
      liquidity = import_jsbi.default.subtract(
        (0, import_sdk_core3.sqrt)(import_jsbi.default.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)),
        import_sdk_core3.MINIMUM_LIQUIDITY
      );
    } else {
      const amount0 = import_jsbi.default.divide(
        import_jsbi.default.multiply(tokenAmounts[0].raw, totalSupply.raw),
        this.reserve0.raw
      );
      const amount1 = import_jsbi.default.divide(
        import_jsbi.default.multiply(tokenAmounts[1].raw, totalSupply.raw),
        this.reserve1.raw
      );
      liquidity = import_jsbi.default.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;
    }
    if (!import_jsbi.default.greaterThan(liquidity, import_sdk_core3.ZERO)) {
      throw new InsufficientInputAmountError();
    }
    return new import_sdk_core3.TokenAmount(this.liquidityToken, liquidity);
  }
  getLiquidityValue(token, totalSupply, liquidity, feeOn = false, kLast) {
    (0, import_tiny_invariant.default)(this.involvesToken(token), "TOKEN");
    (0, import_tiny_invariant.default)(totalSupply.token.equals(this.liquidityToken), "TOTAL_SUPPLY");
    (0, import_tiny_invariant.default)(liquidity.token.equals(this.liquidityToken), "LIQUIDITY");
    (0, import_tiny_invariant.default)(import_jsbi.default.lessThanOrEqual(liquidity.raw, totalSupply.raw), "LIQUIDITY");
    let totalSupplyAdjusted;
    if (!feeOn) {
      totalSupplyAdjusted = totalSupply;
    } else {
      (0, import_tiny_invariant.default)(!!kLast, "K_LAST");
      const kLastParsed = (0, import_sdk_core3.parseBigintIsh)(kLast);
      if (!import_jsbi.default.equal(kLastParsed, import_sdk_core3.ZERO)) {
        const rootK = (0, import_sdk_core3.sqrt)(import_jsbi.default.multiply(this.reserve0.raw, this.reserve1.raw));
        const rootKLast = (0, import_sdk_core3.sqrt)(kLastParsed);
        if (import_jsbi.default.greaterThan(rootK, rootKLast)) {
          const numerator = import_jsbi.default.multiply(
            totalSupply.raw,
            import_jsbi.default.subtract(rootK, rootKLast)
          );
          const denominator = import_jsbi.default.add(import_jsbi.default.multiply(rootK, import_sdk_core3.FIVE), rootKLast);
          const feeLiquidity = import_jsbi.default.divide(numerator, denominator);
          totalSupplyAdjusted = totalSupply.add(
            new import_sdk_core3.TokenAmount(this.liquidityToken, feeLiquidity)
          );
        } else {
          totalSupplyAdjusted = totalSupply;
        }
      } else {
        totalSupplyAdjusted = totalSupply;
      }
    }
    return new import_sdk_core3.TokenAmount(
      token,
      import_jsbi.default.divide(
        import_jsbi.default.multiply(liquidity.raw, this.reserveOf(token).raw),
        totalSupplyAdjusted.raw
      )
    );
  }
};

// src/entities/route.ts
var import_sdk_core4 = require("@traderjoe-xyz/sdk-core");
var import_tiny_invariant2 = __toESM(require("tiny-invariant"));
var Route = class {
  constructor(pairs, input, output) {
    (0, import_tiny_invariant2.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant2.default)(
      pairs.every((pair) => pair.chainId === pairs[0].chainId),
      "CHAIN_IDS"
    );
    (0, import_tiny_invariant2.default)(
      input instanceof import_sdk_core4.Token && pairs[0].involvesToken(input) || input.isNative && pairs[0].involvesToken(import_sdk_core4.WAVAX[pairs[0].chainId]),
      "INPUT"
    );
    (0, import_tiny_invariant2.default)(
      typeof output === "undefined" || output instanceof import_sdk_core4.Token && pairs[pairs.length - 1].involvesToken(output) || output.isNative && pairs[pairs.length - 1].involvesToken(import_sdk_core4.WAVAX[pairs[0].chainId]),
      "OUTPUT"
    );
    const path = [
      input instanceof import_sdk_core4.Token ? input : import_sdk_core4.WAVAX[pairs[0].chainId]
    ];
    for (const [i, pair] of pairs.entries()) {
      const currentInput = path[i];
      (0, import_tiny_invariant2.default)(
        currentInput.equals(pair.token0) || currentInput.equals(pair.token1),
        "PATH"
      );
      const output2 = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;
      path.push(output2);
    }
    this.pairs = pairs;
    this.path = path;
    this.midPrice = Price.fromRoute(this);
    this.input = input;
    this.output = output != null ? output : path[path.length - 1];
  }
  get chainId() {
    return this.pairs[0].chainId;
  }
};

// src/entities/trade.ts
var import_tiny_invariant3 = __toESM(require("tiny-invariant"));
var import_sdk_core5 = require("@traderjoe-xyz/sdk-core");
function computePriceImpact(midPrice, inputAmount, outputAmount) {
  const exactQuote = midPrice.raw.multiply(inputAmount.raw);
  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);
  return new import_sdk_core5.Percent(slippage.numerator, slippage.denominator);
}
function inputOutputComparator(a, b) {
  (0, import_tiny_invariant3.default)(
    (0, import_sdk_core5.currencyEquals)(a.inputAmount.currency, b.inputAmount.currency),
    "INPUT_CURRENCY"
  );
  (0, import_tiny_invariant3.default)(
    (0, import_sdk_core5.currencyEquals)(a.outputAmount.currency, b.outputAmount.currency),
    "OUTPUT_CURRENCY"
  );
  if (a.outputAmount.equalTo(b.outputAmount)) {
    if (a.inputAmount.equalTo(b.inputAmount)) {
      return 0;
    }
    if (a.inputAmount.lessThan(b.inputAmount)) {
      return -1;
    } else {
      return 1;
    }
  } else {
    if (a.outputAmount.lessThan(b.outputAmount)) {
      return 1;
    } else {
      return -1;
    }
  }
}
function tradeComparator(a, b) {
  const ioComp = inputOutputComparator(a, b);
  if (ioComp !== 0) {
    return ioComp;
  }
  if (a.priceImpact.lessThan(b.priceImpact)) {
    return -1;
  } else if (a.priceImpact.greaterThan(b.priceImpact)) {
    return 1;
  }
  return a.route.path.length - b.route.path.length;
}
function wrappedAmount(currencyAmount, chainId) {
  if (currencyAmount instanceof import_sdk_core5.TokenAmount)
    return currencyAmount;
  if (currencyAmount.currency.isNative)
    return new import_sdk_core5.TokenAmount(import_sdk_core5.WAVAX[chainId], currencyAmount.raw);
  (0, import_tiny_invariant3.default)(false, "CURRENCY");
}
function wrappedCurrency(currency, chainId) {
  if (currency instanceof import_sdk_core5.Token)
    return currency;
  if (currency.isNative)
    return import_sdk_core5.WAVAX[chainId];
  (0, import_tiny_invariant3.default)(false, "CURRENCY");
}
var Trade = class _Trade {
  /**
   * Constructs an exact in trade with the given amount in and route
   * @param route route of the exact in trade
   * @param amountIn the amount being passed in
   */
  static exactIn(route, amountIn, chainId) {
    return new _Trade(route, amountIn, import_sdk_core5.TradeType.EXACT_INPUT, chainId);
  }
  /**
   * Constructs an exact out trade with the given amount out and route
   * @param route route of the exact out trade
   * @param amountOut the amount returned by the trade
   */
  static exactOut(route, amountOut, chainId) {
    return new _Trade(route, amountOut, import_sdk_core5.TradeType.EXACT_OUTPUT, chainId);
  }
  constructor(route, amount, tradeType, chainId) {
    const amounts = new Array(route.path.length);
    const nextPairs = new Array(route.pairs.length);
    if (tradeType === import_sdk_core5.TradeType.EXACT_INPUT) {
      (0, import_tiny_invariant3.default)((0, import_sdk_core5.currencyEquals)(amount.currency, route.input), "INPUT");
      amounts[0] = wrappedAmount(amount, route.chainId);
      for (let i = 0; i < route.path.length - 1; i++) {
        const pair = route.pairs[i];
        const [outputAmount, nextPair] = pair.getOutputAmount(
          amounts[i],
          chainId
        );
        amounts[i + 1] = outputAmount;
        nextPairs[i] = nextPair;
      }
    } else {
      (0, import_tiny_invariant3.default)((0, import_sdk_core5.currencyEquals)(amount.currency, route.output), "OUTPUT");
      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);
      for (let i = route.path.length - 1; i > 0; i--) {
        const pair = route.pairs[i - 1];
        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], chainId);
        amounts[i - 1] = inputAmount;
        nextPairs[i - 1] = nextPair;
      }
    }
    this.route = route;
    this.tradeType = tradeType;
    this.inputAmount = tradeType === import_sdk_core5.TradeType.EXACT_INPUT ? amount : route.input.isNative ? import_sdk_core5.CurrencyAmount.ether(chainId, amounts[0].raw) : amounts[0];
    this.outputAmount = tradeType === import_sdk_core5.TradeType.EXACT_OUTPUT ? amount : route.output.isNative ? import_sdk_core5.CurrencyAmount.ether(chainId, amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];
    this.executionPrice = new Price(
      this.inputAmount.currency,
      this.outputAmount.currency,
      this.inputAmount.raw,
      this.outputAmount.raw
    );
    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));
    this.priceImpact = computePriceImpact(
      route.midPrice,
      this.inputAmount,
      this.outputAmount
    );
    this.chainId = chainId;
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  minimumAmountOut(slippageTolerance) {
    (0, import_tiny_invariant3.default)(!slippageTolerance.lessThan(import_sdk_core5.ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === import_sdk_core5.TradeType.EXACT_OUTPUT) {
      return this.outputAmount;
    } else {
      const slippageAdjustedAmountOut = new import_sdk_core5.Fraction(import_sdk_core5.ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      return this.outputAmount instanceof import_sdk_core5.TokenAmount ? new import_sdk_core5.TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : import_sdk_core5.CurrencyAmount.ether(this.chainId, slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   */
  maximumAmountIn(slippageTolerance) {
    (0, import_tiny_invariant3.default)(!slippageTolerance.lessThan(import_sdk_core5.ZERO), "SLIPPAGE_TOLERANCE");
    if (this.tradeType === import_sdk_core5.TradeType.EXACT_INPUT) {
      return this.inputAmount;
    } else {
      const slippageAdjustedAmountIn = new import_sdk_core5.Fraction(import_sdk_core5.ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      return this.inputAmount instanceof import_sdk_core5.TokenAmount ? new import_sdk_core5.TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : import_sdk_core5.CurrencyAmount.ether(this.chainId, slippageAdjustedAmountIn);
    }
  }
  /**
   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token
   * amount to an output token, making at most `maxHops` hops.
   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param currencyAmountIn exact amount of input currency to spend
   * @param currencyOut the desired currency out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  static bestTradeExactIn(pairs, currencyAmountIn, currencyOut, { maxNumResults = 3, maxHops = 3 } = {}, currentPairs = [], originalAmountIn = currencyAmountIn, bestTrades = []) {
    (0, import_tiny_invariant3.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant3.default)(maxHops > 0, "MAX_HOPS");
    (0, import_tiny_invariant3.default)(
      originalAmountIn === currencyAmountIn || currentPairs.length > 0,
      "INVALID_RECURSION"
    );
    const chainId = currencyAmountIn instanceof import_sdk_core5.TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof import_sdk_core5.Token ? currencyOut.chainId : void 0;
    (0, import_tiny_invariant3.default)(chainId !== void 0, "CHAIN_ID");
    const amountIn = wrappedAmount(currencyAmountIn, chainId);
    const tokenOut = wrappedCurrency(currencyOut, chainId);
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i];
      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token))
        continue;
      if (pair.reserve0.equalTo(import_sdk_core5.ZERO) || pair.reserve1.equalTo(import_sdk_core5.ZERO))
        continue;
      let amountOut;
      try {
        ;
        [amountOut] = pair.getOutputAmount(amountIn, chainId);
      } catch (error) {
        if (error instanceof InsufficientInputAmountError) {
          continue;
        }
        throw error;
      }
      if (amountOut.token.equals(tokenOut)) {
        (0, import_sdk_core5.sortedInsert)(
          bestTrades,
          new _Trade(
            new Route(
              [...currentPairs, pair],
              originalAmountIn.currency,
              currencyOut
            ),
            originalAmountIn,
            import_sdk_core5.TradeType.EXACT_INPUT,
            chainId
          ),
          maxNumResults,
          tradeComparator
        );
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        _Trade.bestTradeExactIn(
          pairsExcludingThisPair,
          amountOut,
          currencyOut,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [...currentPairs, pair],
          originalAmountIn,
          bestTrades
        );
      }
    }
    return bestTrades;
  }
  /**
   * similar to the above method but instead targets a fixed output amount
   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token
   * to an output token amount, making at most `maxHops` hops
   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting
   * the amount in among multiple routes.
   * @param pairs the pairs to consider in finding the best trade
   * @param currencyIn the currency to spend
   * @param currencyAmountOut the exact amount of currency out
   * @param maxNumResults maximum number of results to return
   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair
   * @param currentPairs used in recursion; the current list of pairs
   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter
   * @param bestTrades used in recursion; the current list of best trades
   */
  static bestTradeExactOut(pairs, currencyIn, currencyAmountOut, { maxNumResults = 3, maxHops = 3 } = {}, currentPairs = [], originalAmountOut = currencyAmountOut, bestTrades = []) {
    (0, import_tiny_invariant3.default)(pairs.length > 0, "PAIRS");
    (0, import_tiny_invariant3.default)(maxHops > 0, "MAX_HOPS");
    (0, import_tiny_invariant3.default)(
      originalAmountOut === currencyAmountOut || currentPairs.length > 0,
      "INVALID_RECURSION"
    );
    const chainId = currencyAmountOut instanceof import_sdk_core5.TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof import_sdk_core5.Token ? currencyIn.chainId : void 0;
    (0, import_tiny_invariant3.default)(chainId !== void 0, "CHAIN_ID");
    const amountOut = wrappedAmount(currencyAmountOut, chainId);
    const tokenIn = wrappedCurrency(currencyIn, chainId);
    for (let i = 0; i < pairs.length; i++) {
      const pair = pairs[i];
      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token))
        continue;
      if (pair.reserve0.equalTo(import_sdk_core5.ZERO) || pair.reserve1.equalTo(import_sdk_core5.ZERO))
        continue;
      let amountIn;
      try {
        ;
        [amountIn] = pair.getInputAmount(amountOut, chainId);
      } catch (error) {
        if (error instanceof InsufficientReservesError) {
          continue;
        }
        throw error;
      }
      if (amountIn.token.equals(tokenIn)) {
        (0, import_sdk_core5.sortedInsert)(
          bestTrades,
          new _Trade(
            new Route(
              [pair, ...currentPairs],
              currencyIn,
              originalAmountOut.currency
            ),
            originalAmountOut,
            import_sdk_core5.TradeType.EXACT_OUTPUT,
            chainId
          ),
          maxNumResults,
          tradeComparator
        );
      } else if (maxHops > 1 && pairs.length > 1) {
        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        _Trade.bestTradeExactOut(
          pairsExcludingThisPair,
          currencyIn,
          amountIn,
          {
            maxNumResults,
            maxHops: maxHops - 1
          },
          [pair, ...currentPairs],
          originalAmountOut,
          bestTrades
        );
      }
    }
    return bestTrades;
  }
};

// src/router.ts
var import_sdk_core6 = require("@traderjoe-xyz/sdk-core");
var import_tiny_invariant4 = __toESM(require("tiny-invariant"));
function toHex(currencyAmount) {
  return `0x${currencyAmount.raw.toString(16)}`;
}
var ZERO_HEX = "0x0";
var Router = class {
  /**
   * Cannot be constructed.
   */
  constructor() {
  }
  /**
   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.
   * @param trade to produce call parameters for
   * @param options options for the call parameters
   */
  static swapCallParameters(trade, options) {
    const etherIn = trade.inputAmount.currency.isNative;
    const etherOut = trade.outputAmount.currency.isNative;
    (0, import_tiny_invariant4.default)(!(etherIn && etherOut), "ETHER_IN_OUT");
    (0, import_tiny_invariant4.default)(!("ttl" in options) || options.ttl > 0, "TTL");
    const to = (0, import_sdk_core6.validateAndParseAddress)(options.recipient);
    const amountIn = toHex(
      trade.maximumAmountIn(options.allowedSlippage)
    );
    const amountOut = toHex(
      trade.minimumAmountOut(options.allowedSlippage)
    );
    const path = trade.route.path.map((token) => token.address);
    const deadline = "ttl" in options ? `0x${(Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3) + options.ttl).toString(
      16
    )}` : `0x${options.deadline.toString(16)}`;
    const useFeeOnTransfer = Boolean(options.feeOnTransfer);
    let methodName;
    let args;
    let value;
    switch (trade.tradeType) {
      case import_sdk_core6.TradeType.EXACT_INPUT:
        if (etherIn) {
          methodName = useFeeOnTransfer ? "swapExactAVAXForTokensSupportingFeeOnTransferTokens" : "swapExactAVAXForTokens";
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (etherOut) {
          methodName = useFeeOnTransfer ? "swapExactTokensForAVAXSupportingFeeOnTransferTokens" : "swapExactTokensForAVAX";
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = useFeeOnTransfer ? "swapExactTokensForTokensSupportingFeeOnTransferTokens" : "swapExactTokensForTokens";
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
      case import_sdk_core6.TradeType.EXACT_OUTPUT:
        (0, import_tiny_invariant4.default)(!useFeeOnTransfer, "EXACT_OUT_FOT");
        if (etherIn) {
          methodName = "swapAVAXForExactTokens";
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (etherOut) {
          methodName = "swapTokensForExactAVAX";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = "swapTokensForExactTokens";
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
    }
    return {
      methodName,
      args,
      value
    };
  }
};

// src/fetcher.ts
var import_sdk_core8 = require("@traderjoe-xyz/sdk-core");
var import_tiny_invariant5 = __toESM(require("tiny-invariant"));

// src/abis/ts/ERC20.ts
var ERC20ABI = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string"
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/JoePair.ts
var JoePairABI = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256"
      },
      { indexed: true, internalType: "address", name: "to", type: "address" }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1",
        type: "uint256"
      }
    ],
    name: "Mint",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0In",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1In",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount0Out",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount1Out",
        type: "uint256"
      },
      { indexed: true, internalType: "address", name: "to", type: "address" }
    ],
    name: "Swap",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve0",
        type: "uint112"
      },
      {
        indexed: false,
        internalType: "uint112",
        name: "reserve1",
        type: "uint112"
      }
    ],
    name: "Sync",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "MINIMUM_LIQUIDITY",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "burn",
    outputs: [
      { internalType: "uint256", name: "amount0", type: "uint256" },
      { internalType: "uint256", name: "amount1", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      { internalType: "uint112", name: "_reserve0", type: "uint112" },
      { internalType: "uint112", name: "_reserve1", type: "uint112" },
      { internalType: "uint32", name: "_blockTimestampLast", type: "uint32" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_token0", type: "address" },
      { internalType: "address", name: "_token1", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "kLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "mint",
    outputs: [{ internalType: "uint256", name: "liquidity", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "nonces",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
      { internalType: "uint256", name: "deadline", type: "uint256" },
      { internalType: "uint8", name: "v", type: "uint8" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "s", type: "bytes32" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "price0CumulativeLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "price1CumulativeLast",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "to", type: "address" }],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amount0Out", type: "uint256" },
      { internalType: "uint256", name: "amount1Out", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" }
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "token0",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "token1",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/RocketJoeStaking.ts
var RocketJoeStakingABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdraw",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_rJoePerSec",
        type: "uint256"
      }
    ],
    name: "UpdateEmissionRate",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "MAX_EMISSION_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "accRJoePerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_joe",
        type: "address"
      },
      {
        internalType: "contract RocketJoeToken",
        name: "_rJoe",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_rJoePerSec",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastRewardTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address"
      }
    ],
    name: "pendingRJoe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "rJoe",
    outputs: [
      {
        internalType: "contract RocketJoeToken",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "rJoePerSec",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "totalJoeStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rJoePerSec",
        type: "uint256"
      }
    ],
    name: "updateEmissionRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "updatePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256"
      }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/Router.ts
var RouterABI = [
  {
    inputs: [
      { internalType: "address", name: "_factory", type: "address" },
      { internalType: "address", name: "_WAVAX", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "WAVAX",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "tokenA", type: "address" },
      { internalType: "address", name: "tokenB", type: "address" },
      { internalType: "uint256", name: "amountADesired", type: "uint256" },
      { internalType: "uint256", name: "amountBDesired", type: "uint256" },
      { internalType: "uint256", name: "amountAMin", type: "uint256" },
      { internalType: "uint256", name: "amountBMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "addLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountA", type: "uint256" },
      { internalType: "uint256", name: "amountB", type: "uint256" },
      { internalType: "uint256", name: "liquidity", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "amountTokenDesired", type: "uint256" },
      { internalType: "uint256", name: "amountTokenMin", type: "uint256" },
      { internalType: "uint256", name: "amountAVAXMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "addLiquidityAVAX",
    outputs: [
      { internalType: "uint256", name: "amountToken", type: "uint256" },
      { internalType: "uint256", name: "amountAVAX", type: "uint256" },
      { internalType: "uint256", name: "liquidity", type: "uint256" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "factory",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "uint256", name: "reserveIn", type: "uint256" },
      { internalType: "uint256", name: "reserveOut", type: "uint256" }
    ],
    name: "getAmountIn",
    outputs: [{ internalType: "uint256", name: "amountIn", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "reserveIn", type: "uint256" },
      { internalType: "uint256", name: "reserveOut", type: "uint256" }
    ],
    name: "getAmountOut",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" }
    ],
    name: "getAmountsIn",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" }
    ],
    name: "getAmountsOut",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountA", type: "uint256" },
      { internalType: "uint256", name: "reserveA", type: "uint256" },
      { internalType: "uint256", name: "reserveB", type: "uint256" }
    ],
    name: "quote",
    outputs: [{ internalType: "uint256", name: "amountB", type: "uint256" }],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "tokenA", type: "address" },
      { internalType: "address", name: "tokenB", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountAMin", type: "uint256" },
      { internalType: "uint256", name: "amountBMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidity",
    outputs: [
      { internalType: "uint256", name: "amountA", type: "uint256" },
      { internalType: "uint256", name: "amountB", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountTokenMin", type: "uint256" },
      { internalType: "uint256", name: "amountAVAXMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidityAVAX",
    outputs: [
      { internalType: "uint256", name: "amountToken", type: "uint256" },
      { internalType: "uint256", name: "amountAVAX", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountTokenMin", type: "uint256" },
      { internalType: "uint256", name: "amountAVAXMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "removeLiquidityAVAXSupportingFeeOnTransferTokens",
    outputs: [{ internalType: "uint256", name: "amountAVAX", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountTokenMin", type: "uint256" },
      { internalType: "uint256", name: "amountAVAXMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" },
      { internalType: "bool", name: "approveMax", type: "bool" },
      { internalType: "uint8", name: "v", type: "uint8" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "s", type: "bytes32" }
    ],
    name: "removeLiquidityAVAXWithPermit",
    outputs: [
      { internalType: "uint256", name: "amountToken", type: "uint256" },
      { internalType: "uint256", name: "amountAVAX", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "token", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountTokenMin", type: "uint256" },
      { internalType: "uint256", name: "amountAVAXMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" },
      { internalType: "bool", name: "approveMax", type: "bool" },
      { internalType: "uint8", name: "v", type: "uint8" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "s", type: "bytes32" }
    ],
    name: "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens",
    outputs: [{ internalType: "uint256", name: "amountAVAX", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "tokenA", type: "address" },
      { internalType: "address", name: "tokenB", type: "address" },
      { internalType: "uint256", name: "liquidity", type: "uint256" },
      { internalType: "uint256", name: "amountAMin", type: "uint256" },
      { internalType: "uint256", name: "amountBMin", type: "uint256" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" },
      { internalType: "bool", name: "approveMax", type: "bool" },
      { internalType: "uint8", name: "v", type: "uint8" },
      { internalType: "bytes32", name: "r", type: "bytes32" },
      { internalType: "bytes32", name: "s", type: "bytes32" }
    ],
    name: "removeLiquidityWithPermit",
    outputs: [
      { internalType: "uint256", name: "amountA", type: "uint256" },
      { internalType: "uint256", name: "amountB", type: "uint256" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapAVAXForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactAVAXForTokens",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForAVAX",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "uint256", name: "amountOutMin", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactAVAX",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "amountOut", type: "uint256" },
      { internalType: "uint256", name: "amountInMax", type: "uint256" },
      { internalType: "address[]", name: "path", type: "address[]" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "deadline", type: "uint256" }
    ],
    name: "swapTokensForExactTokens",
    outputs: [
      { internalType: "uint256[]", name: "amounts", type: "uint256[]" }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  { stateMutability: "payable", type: "receive" }
];

// src/abis/ts/StableJoeStaking.ts
var StableJoeStakingABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "address",
        name: "rewardToken",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "ClaimReward",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      },
      { indexed: false, internalType: "uint256", name: "fee", type: "uint256" }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFee",
        type: "uint256"
      }
    ],
    name: "DepositFeeChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "EmergencyWithdraw",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "RewardTokenAdded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "RewardTokenRemoved",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "ACC_REWARD_PER_SHARE_PRECISION",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "DEPOSIT_FEE_PERCENT_PRECISION",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    name: "accRewardPerShare",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_rewardToken",
        type: "address"
      }
    ],
    name: "addRewardToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "depositFeePercent",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "feeCollector",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_user", type: "address" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "_rewardToken",
        type: "address"
      }
    ],
    name: "getUserInfo",
    outputs: [
      { internalType: "uint256", name: "", type: "uint256" },
      { internalType: "uint256", name: "", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_rewardToken",
        type: "address"
      },
      {
        internalType: "contract IERC20Upgradeable",
        name: "_joe",
        type: "address"
      },
      { internalType: "address", name: "_feeCollector", type: "address" },
      { internalType: "uint256", name: "_depositFeePercent", type: "uint256" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "internalJoeBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    name: "isRewardToken",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    name: "lastRewardBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_user", type: "address" },
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address"
      }
    ],
    name: "pendingReward",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_rewardToken",
        type: "address"
      }
    ],
    name: "removeRewardToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "rewardTokens",
    outputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "rewardTokensLength",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "_depositFeePercent", type: "uint256" }
    ],
    name: "setDepositFeePercent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address"
      }
    ],
    name: "updateReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/VeJoe.ts
var VeJoeABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Burn",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Mint",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "address",
        name: "boostedMasterChef",
        type: "address"
      }
    ],
    name: "UpdateBoostedMasterChefJoe",
    type: "event"
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "boostedMasterChef",
    outputs: [
      {
        internalType: "contract IBoostedMasterChefJoe",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_from", type: "address" },
      { internalType: "uint256", name: "_amount", type: "uint256" }
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_to", type: "address" },
      { internalType: "uint256", name: "_amount", type: "uint256" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "_boostedMasterChef", type: "address" }
    ],
    name: "setBoostedMasterChefJoe",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/VeJoeStaking.ts
var VeJoeStakingABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Claim",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "maxCapPct",
        type: "uint256"
      }
    ],
    name: "UpdateMaxCapPct",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lastRewardTimestamp",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "accVeJoePerShare",
        type: "uint256"
      }
    ],
    name: "UpdateRewardVars",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "speedUpThreshold",
        type: "uint256"
      }
    ],
    name: "UpdateSpeedUpThreshold",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "veJoePerSharePerSec",
        type: "uint256"
      }
    ],
    name: "UpdateVeJoePerSharePerSec",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "burnAmount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "ACC_VEJOE_PER_SHARE_PRECISION",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VEJOE_PER_SHARE_PER_SEC_PRECISION",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "accVeJoePerShare",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "_user", type: "address" }],
    name: "getPendingVeJoe",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "_joe",
        type: "address"
      },
      { internalType: "contract VeJoeToken", name: "_veJoe", type: "address" },
      {
        internalType: "uint256",
        name: "_veJoePerSharePerSec",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_speedUpVeJoePerSharePerSec",
        type: "uint256"
      },
      { internalType: "uint256", name: "_speedUpThreshold", type: "uint256" },
      { internalType: "uint256", name: "_speedUpDuration", type: "uint256" },
      { internalType: "uint256", name: "_maxCapPct", type: "uint256" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [
      { internalType: "contract IERC20Upgradeable", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastRewardTimestamp",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "maxCapPct",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_maxCapPct", type: "uint256" }],
    name: "setMaxCapPct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "_speedUpThreshold", type: "uint256" }
    ],
    name: "setSpeedUpThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "_veJoePerSharePerSec", type: "uint256" }
    ],
    name: "setVeJoePerSharePerSec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "speedUpDuration",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "speedUpThreshold",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "speedUpVeJoePerSharePerSec",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "updateRewardVars",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "upperLimitMaxCapPct",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "upperLimitVeJoePerSharePerSec",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "userInfos",
    outputs: [
      { internalType: "uint256", name: "balance", type: "uint256" },
      { internalType: "uint256", name: "rewardDebt", type: "uint256" },
      { internalType: "uint256", name: "lastClaimTimestamp", type: "uint256" },
      { internalType: "uint256", name: "speedUpEndTimestamp", type: "uint256" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "veJoe",
    outputs: [
      { internalType: "contract VeJoeToken", name: "", type: "address" }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "veJoePerSharePerSec",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/WNative.ts
var WNativeABI = [
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "src", type: "address" },
      { indexed: true, internalType: "address", name: "guy", type: "address" },
      { indexed: false, internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "dst", type: "address" },
      { indexed: false, internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "src", type: "address" },
      { indexed: true, internalType: "address", name: "dst", type: "address" },
      { indexed: false, internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "src", type: "address" },
      { indexed: false, internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "Withdrawal",
    type: "event"
  },
  { payable: true, stateMutability: "payable", type: "fallback" },
  {
    constant: true,
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "guy", type: "address" },
      { internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [],
    name: "deposit",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "dst", type: "address" },
      { internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      { internalType: "address", name: "src", type: "address" },
      { internalType: "address", name: "dst", type: "address" },
      { internalType: "uint256", name: "wad", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: false,
    inputs: [{ internalType: "uint256", name: "wad", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/abis/ts/XJoeStaking.ts
var XJoeStakingABI = [
  {
    inputs: [
      { internalType: "contract IERC20", name: "_joe", type: "address" }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "subtractedValue", type: "uint256" }
    ],
    name: "decreaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }],
    name: "enter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "addedValue", type: "uint256" }
    ],
    name: "increaseAllowance",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "joe",
    outputs: [{ internalType: "contract IERC20", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_share", type: "uint256" }],
    name: "leave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "sender", type: "address" },
      { internalType: "address", name: "recipient", type: "address" },
      { internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/fetcher.ts
var import_viem3 = require("viem");

// src/utils.ts
var import_viem2 = require("viem");
var import_chains = require("viem/chains");
var import_sdk_core7 = require("@traderjoe-xyz/sdk-core");
var getDefaultPublicClient = (chainId) => {
  const chain = getChain(chainId);
  return (0, import_viem2.createPublicClient)({
    chain,
    transport: (0, import_viem2.http)()
  });
};
var getChain = (chainId) => {
  switch (chainId) {
    case import_sdk_core7.ChainId.ARBITRUM_ONE:
      return import_chains.arbitrum;
    case import_sdk_core7.ChainId.ARB_GOERLI:
      return import_chains.arbitrumGoerli;
    case import_sdk_core7.ChainId.AVALANCHE:
      return import_chains.avalanche;
    case import_sdk_core7.ChainId.FUJI:
      return import_chains.avalancheFuji;
    case import_sdk_core7.ChainId.BNB_CHAIN:
      return import_chains.bsc;
    case import_sdk_core7.ChainId.BNB_TESTNET:
      return import_chains.bscTestnet;
    case import_sdk_core7.ChainId.ETHEREUM:
      return import_chains.mainnet;
  }
};

// src/fetcher.ts
var TOKEN_DECIMALS_CACHE = {};
var Fetcher = class {
  /**
   * Cannot be constructed.
   */
  constructor() {
  }
  /**
   * Fetch information for a given token on the given chain, using the given viem public client.
   * @param chainId chain of the token
   * @param address address of the token on the chain
   * @param client client used to fetch the token
   * @param symbol optional symbol of the token
   * @param name optional name of the token
   */
  static async fetchTokenData(chainId, address, client = getDefaultPublicClient(chainId), symbol, name) {
    var _a;
    const parsedDecimals = typeof ((_a = TOKEN_DECIMALS_CACHE == null ? void 0 : TOKEN_DECIMALS_CACHE[chainId]) == null ? void 0 : _a[address]) === "number" ? TOKEN_DECIMALS_CACHE[chainId][address] : await client.readContract({
      abi: ERC20ABI,
      functionName: "decimals",
      address: (0, import_viem3.getAddress)(address)
    }).then((decimals) => {
      TOKEN_DECIMALS_CACHE = {
        ...TOKEN_DECIMALS_CACHE,
        [chainId]: {
          ...TOKEN_DECIMALS_CACHE == null ? void 0 : TOKEN_DECIMALS_CACHE[chainId],
          [address]: decimals
        }
      };
      return decimals;
    });
    return new import_sdk_core8.Token(chainId, address, parsedDecimals, symbol, name);
  }
  /**
   * Fetches information about a pair and constructs a pair from the given two tokens.
   * @param tokenA first token
   * @param tokenB second token
   * @param provider the provider to use to fetch the data
   */
  static async fetchPairData(tokenA, tokenB, client = getDefaultPublicClient(tokenA.chainId)) {
    (0, import_tiny_invariant5.default)(tokenA.chainId === tokenB.chainId, "CHAIN_ID");
    const address = Pair.getAddress(tokenA, tokenB, tokenA.chainId);
    const [reserves0, reserves1] = await client.readContract({
      abi: JoePairABI,
      functionName: "getReserves",
      address: (0, import_viem3.getAddress)(address)
    });
    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];
    return new Pair(
      new import_sdk_core8.TokenAmount(tokenA, balances[0]),
      new import_sdk_core8.TokenAmount(tokenB, balances[1]),
      tokenA.chainId
    );
  }
};

// src/subgraphs.ts
var import_sdk_core9 = require("@traderjoe-xyz/sdk-core");
var EXCHANGE_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/exchange",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v1-arbitrum",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v1-arb-goerli",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v1-bnb",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v1-bnbtest",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var MASTERCHEF_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/masterchefv2",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var DEXCANDLES_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var BAR_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/bar",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var LENDING_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/lending",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var ROCKET_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/rocket",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var SJOE_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/sjoe-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/sjoe",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/sjoe-arbitrum",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var MONEY_MAKER_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/moneymaker-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/money-maker",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var VEJOE_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/vejoe-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/vejoe",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var BOOSTED_MASTERCHEF_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/boostedmasterchef-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/boosted-master-chef",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var NFT_CONTRACTS_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/nft-contract-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/nft-contracts",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var JOEPEG_MARKETPLACE_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/marketplace-fuji",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/marketplace",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
var FEE_COLLECTOR_SUBGRAPH = {
  [import_sdk_core9.ChainId.FUJI]: "",
  [import_sdk_core9.ChainId.AVALANCHE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/fee-collector-avax",
  [import_sdk_core9.ChainId.ARBITRUM_ONE]: "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/fee-collector-arbitrum",
  [import_sdk_core9.ChainId.ARB_GOERLI]: "",
  [import_sdk_core9.ChainId.BNB_CHAIN]: "",
  [import_sdk_core9.ChainId.BNB_TESTNET]: "",
  [import_sdk_core9.ChainId.ETHEREUM]: ""
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BAR_ADDRESS,
  BAR_SUBGRAPH,
  BOOSTED_MASTERCHEF_ADDRESS,
  BOOSTED_MASTERCHEF_SUBGRAPH,
  BORINGDASHBOARD_ADDRESS,
  BORINGHELPER_ADDRESS,
  BORINGHELPER_BMCJ_ADDRESS,
  BORINGHELPER_MCV3_ADDRESS,
  BORINGTOKENSCANNER_ADDRESS,
  DEXCANDLES_SUBGRAPH,
  ERC20ABI,
  EXCHANGE_SUBGRAPH,
  FACTORY_ADDRESS,
  FARMLENSV2_ADDRESS,
  FARMLENS_ADDRESS,
  FEE_COLLECTOR_SUBGRAPH,
  Fetcher,
  INIT_CODE_HASH,
  InsufficientInputAmountError,
  InsufficientReservesError,
  JAVAX_ADDRESS,
  JOELENS_ADDRESS,
  JOEPEG_MARKETPLACE_SUBGRAPH,
  JOE_ADDRESS,
  JSBI,
  JoePairABI,
  LAUNCH_EVENT_LENS_ADDRESS,
  LENDING_SUBGRAPH,
  LOCKING_WRAPPER_ADDRESS,
  MAKER_ADDRESS,
  MASTERCHEF_ADDRESS,
  MASTERCHEF_SUBGRAPH,
  MASTERCHEF_V3_ADDRESS,
  MAXIMILLION_ADDRESS,
  MONEY_MAKER_ADDRESS,
  MONEY_MAKER_SUBGRAPH,
  NFT_CONTRACTS_SUBGRAPH,
  Pair,
  ROCKET_JOE_STAKING_ADDRESS,
  ROCKET_JOE_TOKEN_ADDRESS,
  ROCKET_SUBGRAPH,
  ROLL_ADDRESS,
  ROUTER_ADDRESS,
  RocketJoeStakingABI,
  Route,
  Router,
  RouterABI,
  SJOE_REWARD_TOKEN,
  SJOE_SUBGRAPH,
  STABLE_JOE_STAKING_ADDRESS,
  StableJoeStakingABI,
  Trade,
  UNITROLLER_ADDRESS,
  VEJOE_STAKING_ADDRESS,
  VEJOE_SUBGRAPH,
  VEJOE_TOKEN_ADDRESS,
  VeJoeABI,
  VeJoeStakingABI,
  WNativeABI,
  XJoeStakingABI,
  ZAP_ADDRESS,
  inputOutputComparator,
  tradeComparator
});
